
e314.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004244  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004350  08004350  00014350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800437c  0800437c  000202c0  2**0
                  CONTENTS
  4 .ARM          00000000  0800437c  0800437c  000202c0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800437c  0800437c  000202c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800437c  0800437c  0001437c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004380  08004380  00014380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c0  20000000  08004384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  200002c0  08004644  000202c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08004644  00020444  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a0e6  00000000  00000000  000202e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a0e  00000000  00000000  0002a3cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a98  00000000  00000000  0002bde0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e0  00000000  00000000  0002c878  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014386  00000000  00000000  0002d258  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000871b  00000000  00000000  000415de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007199b  00000000  00000000  00049cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bb694  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b20  00000000  00000000  000bb710  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002c0 	.word	0x200002c0
 8000128:	00000000 	.word	0x00000000
 800012c:	08004338 	.word	0x08004338

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002c4 	.word	0x200002c4
 8000148:	08004338 	.word	0x08004338

0800014c <calibration_sequence>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Run the calibration sequence
void calibration_sequence() {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

	// Light up the columns
	for (uint8_t col = 0; col < 8; ++col) {
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e03c      	b.n	80001d2 <calibration_sequence+0x86>
		light_up_LED(col, 0);
 8000158:	79fb      	ldrb	r3, [r7, #7]
 800015a:	2100      	movs	r1, #0
 800015c:	4618      	mov	r0, r3
 800015e:	f000 fb8f 	bl	8000880 <light_up_LED>
		light_up_LED(col, 1);
 8000162:	79fb      	ldrb	r3, [r7, #7]
 8000164:	2101      	movs	r1, #1
 8000166:	4618      	mov	r0, r3
 8000168:	f000 fb8a 	bl	8000880 <light_up_LED>
		light_up_LED(col, 2);
 800016c:	79fb      	ldrb	r3, [r7, #7]
 800016e:	2102      	movs	r1, #2
 8000170:	4618      	mov	r0, r3
 8000172:	f000 fb85 	bl	8000880 <light_up_LED>
		light_up_LED(col, 3);
 8000176:	79fb      	ldrb	r3, [r7, #7]
 8000178:	2103      	movs	r1, #3
 800017a:	4618      	mov	r0, r3
 800017c:	f000 fb80 	bl	8000880 <light_up_LED>
		light_up_LED(col, 4);
 8000180:	79fb      	ldrb	r3, [r7, #7]
 8000182:	2104      	movs	r1, #4
 8000184:	4618      	mov	r0, r3
 8000186:	f000 fb7b 	bl	8000880 <light_up_LED>
		light_up_LED(col, 5);
 800018a:	79fb      	ldrb	r3, [r7, #7]
 800018c:	2105      	movs	r1, #5
 800018e:	4618      	mov	r0, r3
 8000190:	f000 fb76 	bl	8000880 <light_up_LED>
		light_up_LED(col, 6);
 8000194:	79fb      	ldrb	r3, [r7, #7]
 8000196:	2106      	movs	r1, #6
 8000198:	4618      	mov	r0, r3
 800019a:	f000 fb71 	bl	8000880 <light_up_LED>
		light_up_LED(col, 7);
 800019e:	79fb      	ldrb	r3, [r7, #7]
 80001a0:	2107      	movs	r1, #7
 80001a2:	4618      	mov	r0, r3
 80001a4:	f000 fb6c 	bl	8000880 <light_up_LED>

		// Update calibration message and transmit it
		calibration[2] = col + 48;
 80001a8:	79fb      	ldrb	r3, [r7, #7]
 80001aa:	3330      	adds	r3, #48	; 0x30
 80001ac:	b2da      	uxtb	r2, r3
 80001ae:	4b0c      	ldr	r3, [pc, #48]	; (80001e0 <calibration_sequence+0x94>)
 80001b0:	709a      	strb	r2, [r3, #2]
		HAL_UART_Transmit(&huart2, calibration, 10, 50);
 80001b2:	2332      	movs	r3, #50	; 0x32
 80001b4:	220a      	movs	r2, #10
 80001b6:	490a      	ldr	r1, [pc, #40]	; (80001e0 <calibration_sequence+0x94>)
 80001b8:	480a      	ldr	r0, [pc, #40]	; (80001e4 <calibration_sequence+0x98>)
 80001ba:	f003 fed4 	bl	8003f66 <HAL_UART_Transmit>

		HAL_Delay(1000);
 80001be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001c2:	f001 fd77 	bl	8001cb4 <HAL_Delay>
		reset_all_ports(0);
 80001c6:	2000      	movs	r0, #0
 80001c8:	f000 fb86 	bl	80008d8 <reset_all_ports>
	for (uint8_t col = 0; col < 8; ++col) {
 80001cc:	79fb      	ldrb	r3, [r7, #7]
 80001ce:	3301      	adds	r3, #1
 80001d0:	71fb      	strb	r3, [r7, #7]
 80001d2:	79fb      	ldrb	r3, [r7, #7]
 80001d4:	2b07      	cmp	r3, #7
 80001d6:	d9bf      	bls.n	8000158 <calibration_sequence+0xc>
	}


}
 80001d8:	bf00      	nop
 80001da:	3708      	adds	r7, #8
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	200003f4 	.word	0x200003f4

080001e8 <light_up_corners>:

void light_up_corners() {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
		reset_all_ports(0);
 80001ec:	2000      	movs	r0, #0
 80001ee:	f000 fb73 	bl	80008d8 <reset_all_ports>
		light_up_LED(0, 0);
 80001f2:	2100      	movs	r1, #0
 80001f4:	2000      	movs	r0, #0
 80001f6:	f000 fb43 	bl	8000880 <light_up_LED>
		light_up_LED(0, 7);
 80001fa:	2107      	movs	r1, #7
 80001fc:	2000      	movs	r0, #0
 80001fe:	f000 fb3f 	bl	8000880 <light_up_LED>
		light_up_LED(7, 7);
 8000202:	2107      	movs	r1, #7
 8000204:	2007      	movs	r0, #7
 8000206:	f000 fb3b 	bl	8000880 <light_up_LED>
		light_up_LED(7, 0);
 800020a:	2100      	movs	r1, #0
 800020c:	2007      	movs	r0, #7
 800020e:	f000 fb37 	bl	8000880 <light_up_LED>
}
 8000212:	bf00      	nop
 8000214:	bd80      	pop	{r7, pc}
	...

08000218 <transmit_maze_uart>:
	maze[2] = ball_x_pos + 48;
	maze[3] = ball_y_pos + 48;
	HAL_UART_Transmit(&huart2, maze, 10, 50);
}

void transmit_maze_uart() {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	maze[2] = ball_x_pos + 48;
 800021c:	4b0f      	ldr	r3, [pc, #60]	; (800025c <transmit_maze_uart+0x44>)
 800021e:	781b      	ldrb	r3, [r3, #0]
 8000220:	3330      	adds	r3, #48	; 0x30
 8000222:	b2da      	uxtb	r2, r3
 8000224:	4b0e      	ldr	r3, [pc, #56]	; (8000260 <transmit_maze_uart+0x48>)
 8000226:	709a      	strb	r2, [r3, #2]
	maze[3] = ball_y_pos + 48;
 8000228:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <transmit_maze_uart+0x4c>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	3330      	adds	r3, #48	; 0x30
 800022e:	b2da      	uxtb	r2, r3
 8000230:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <transmit_maze_uart+0x48>)
 8000232:	70da      	strb	r2, [r3, #3]
	maze[4] = (display_matrix_ball_flag + 48);
 8000234:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <transmit_maze_uart+0x50>)
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	3330      	adds	r3, #48	; 0x30
 800023a:	b2da      	uxtb	r2, r3
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <transmit_maze_uart+0x48>)
 800023e:	711a      	strb	r2, [r3, #4]
	maze[5] = (display_matrix_end_flag + 48);
 8000240:	4b0a      	ldr	r3, [pc, #40]	; (800026c <transmit_maze_uart+0x54>)
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	3330      	adds	r3, #48	; 0x30
 8000246:	b2da      	uxtb	r2, r3
 8000248:	4b05      	ldr	r3, [pc, #20]	; (8000260 <transmit_maze_uart+0x48>)
 800024a:	715a      	strb	r2, [r3, #5]
	HAL_UART_Transmit(&huart2, maze, 10, 50);
 800024c:	2332      	movs	r3, #50	; 0x32
 800024e:	220a      	movs	r2, #10
 8000250:	4903      	ldr	r1, [pc, #12]	; (8000260 <transmit_maze_uart+0x48>)
 8000252:	4807      	ldr	r0, [pc, #28]	; (8000270 <transmit_maze_uart+0x58>)
 8000254:	f003 fe87 	bl	8003f66 <HAL_UART_Transmit>
}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	2000002e 	.word	0x2000002e
 8000260:	20000018 	.word	0x20000018
 8000264:	2000002f 	.word	0x2000002f
 8000268:	20000329 	.word	0x20000329
 800026c:	2000032a 	.word	0x2000032a
 8000270:	200003f4 	.word	0x200003f4

08000274 <transmit_tennis_uart>:

void transmit_tennis_uart() {
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	tennis[2] = ball_x_pos + 48;
 8000278:	4b15      	ldr	r3, [pc, #84]	; (80002d0 <transmit_tennis_uart+0x5c>)
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	3330      	adds	r3, #48	; 0x30
 800027e:	b2da      	uxtb	r2, r3
 8000280:	4b14      	ldr	r3, [pc, #80]	; (80002d4 <transmit_tennis_uart+0x60>)
 8000282:	709a      	strb	r2, [r3, #2]
	tennis[3] = ball_x_pos + 48;
 8000284:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <transmit_tennis_uart+0x5c>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	3330      	adds	r3, #48	; 0x30
 800028a:	b2da      	uxtb	r2, r3
 800028c:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <transmit_tennis_uart+0x60>)
 800028e:	70da      	strb	r2, [r3, #3]
	tennis[4] = tennis_ball_velocity + 48;
 8000290:	4b11      	ldr	r3, [pc, #68]	; (80002d8 <transmit_tennis_uart+0x64>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	3330      	adds	r3, #48	; 0x30
 8000296:	b2da      	uxtb	r2, r3
 8000298:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <transmit_tennis_uart+0x60>)
 800029a:	711a      	strb	r2, [r3, #4]
	tennis[5] = tennis_ball_direction + 48;
 800029c:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <transmit_tennis_uart+0x68>)
 800029e:	781b      	ldrb	r3, [r3, #0]
 80002a0:	3330      	adds	r3, #48	; 0x30
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <transmit_tennis_uart+0x60>)
 80002a6:	715a      	strb	r2, [r3, #5]
	tennis[6] = bat_x_pos + 48;
 80002a8:	4b0d      	ldr	r3, [pc, #52]	; (80002e0 <transmit_tennis_uart+0x6c>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	3330      	adds	r3, #48	; 0x30
 80002ae:	b2da      	uxtb	r2, r3
 80002b0:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <transmit_tennis_uart+0x60>)
 80002b2:	719a      	strb	r2, [r3, #6]
	tennis[7] = bat_y_pos + 48;
 80002b4:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <transmit_tennis_uart+0x70>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	3330      	adds	r3, #48	; 0x30
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	4b05      	ldr	r3, [pc, #20]	; (80002d4 <transmit_tennis_uart+0x60>)
 80002be:	71da      	strb	r2, [r3, #7]
	HAL_UART_Transmit(&huart2, tennis, 10, 50);
 80002c0:	2332      	movs	r3, #50	; 0x32
 80002c2:	220a      	movs	r2, #10
 80002c4:	4903      	ldr	r1, [pc, #12]	; (80002d4 <transmit_tennis_uart+0x60>)
 80002c6:	4808      	ldr	r0, [pc, #32]	; (80002e8 <transmit_tennis_uart+0x74>)
 80002c8:	f003 fe4d 	bl	8003f66 <HAL_UART_Transmit>
}
 80002cc:	bf00      	nop
 80002ce:	bd80      	pop	{r7, pc}
 80002d0:	2000002e 	.word	0x2000002e
 80002d4:	20000024 	.word	0x20000024
 80002d8:	2000003a 	.word	0x2000003a
 80002dc:	2000043c 	.word	0x2000043c
 80002e0:	200002e4 	.word	0x200002e4
 80002e4:	20000030 	.word	0x20000030
 80002e8:	200003f4 	.word	0x200003f4

080002ec <imu_setup>:

void imu_setup() {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b082      	sub	sp, #8
 80002f0:	af02      	add	r7, sp, #8
	i2cData[0] = 0x20;
 80002f2:	4b0a      	ldr	r3, [pc, #40]	; (800031c <imu_setup+0x30>)
 80002f4:	2220      	movs	r2, #32
 80002f6:	701a      	strb	r2, [r3, #0]
	i2cData[1] = 0x57;
 80002f8:	4b08      	ldr	r3, [pc, #32]	; (800031c <imu_setup+0x30>)
 80002fa:	2257      	movs	r2, #87	; 0x57
 80002fc:	705a      	strb	r2, [r3, #1]
	res = HAL_I2C_Master_Transmit(&hi2c1, 0x30, i2cData, 2, 10);
 80002fe:	230a      	movs	r3, #10
 8000300:	9300      	str	r3, [sp, #0]
 8000302:	2302      	movs	r3, #2
 8000304:	4a05      	ldr	r2, [pc, #20]	; (800031c <imu_setup+0x30>)
 8000306:	2130      	movs	r1, #48	; 0x30
 8000308:	4805      	ldr	r0, [pc, #20]	; (8000320 <imu_setup+0x34>)
 800030a:	f002 fad9 	bl	80028c0 <HAL_I2C_Master_Transmit>
 800030e:	4603      	mov	r3, r0
 8000310:	461a      	mov	r2, r3
 8000312:	4b04      	ldr	r3, [pc, #16]	; (8000324 <imu_setup+0x38>)
 8000314:	701a      	strb	r2, [r3, #0]
}
 8000316:	bf00      	nop
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}
 800031c:	200003e8 	.word	0x200003e8
 8000320:	2000035c 	.word	0x2000035c
 8000324:	20000434 	.word	0x20000434

08000328 <read_imu>:

void read_imu() {
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af02      	add	r7, sp, #8
	i2cData[0] = 0xA8;
 800032e:	4b15      	ldr	r3, [pc, #84]	; (8000384 <read_imu+0x5c>)
 8000330:	22a8      	movs	r2, #168	; 0xa8
 8000332:	701a      	strb	r2, [r3, #0]
	res = HAL_I2C_Master_Transmit(&hi2c1, 0x30, i2cData, 1, 10);
 8000334:	230a      	movs	r3, #10
 8000336:	9300      	str	r3, [sp, #0]
 8000338:	2301      	movs	r3, #1
 800033a:	4a12      	ldr	r2, [pc, #72]	; (8000384 <read_imu+0x5c>)
 800033c:	2130      	movs	r1, #48	; 0x30
 800033e:	4812      	ldr	r0, [pc, #72]	; (8000388 <read_imu+0x60>)
 8000340:	f002 fabe 	bl	80028c0 <HAL_I2C_Master_Transmit>
 8000344:	4603      	mov	r3, r0
 8000346:	461a      	mov	r2, r3
 8000348:	4b10      	ldr	r3, [pc, #64]	; (800038c <read_imu+0x64>)
 800034a:	701a      	strb	r2, [r3, #0]
	res = HAL_I2C_Master_Receive(&hi2c1, 0x30, i2cData, 4, 10);
 800034c:	230a      	movs	r3, #10
 800034e:	9300      	str	r3, [sp, #0]
 8000350:	2304      	movs	r3, #4
 8000352:	4a0c      	ldr	r2, [pc, #48]	; (8000384 <read_imu+0x5c>)
 8000354:	2130      	movs	r1, #48	; 0x30
 8000356:	480c      	ldr	r0, [pc, #48]	; (8000388 <read_imu+0x60>)
 8000358:	f002 fbb0 	bl	8002abc <HAL_I2C_Master_Receive>
 800035c:	4603      	mov	r3, r0
 800035e:	461a      	mov	r2, r3
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <read_imu+0x64>)
 8000362:	701a      	strb	r2, [r3, #0]

	ax = *((int16_t*)i2cData);
 8000364:	4b07      	ldr	r3, [pc, #28]	; (8000384 <read_imu+0x5c>)
 8000366:	f9b3 3000 	ldrsh.w	r3, [r3]
 800036a:	461a      	mov	r2, r3
 800036c:	4b08      	ldr	r3, [pc, #32]	; (8000390 <read_imu+0x68>)
 800036e:	601a      	str	r2, [r3, #0]
	ay = *((int16_t*)(i2cData+2));
 8000370:	4b08      	ldr	r3, [pc, #32]	; (8000394 <read_imu+0x6c>)
 8000372:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000376:	461a      	mov	r2, r3
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <read_imu+0x70>)
 800037a:	601a      	str	r2, [r3, #0]
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	200003e8 	.word	0x200003e8
 8000388:	2000035c 	.word	0x2000035c
 800038c:	20000434 	.word	0x20000434
 8000390:	200003e4 	.word	0x200003e4
 8000394:	200003ea 	.word	0x200003ea
 8000398:	20000438 	.word	0x20000438

0800039c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a0:	f001 fc26 	bl	8001bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a4:	f000 f886 	bl	80004b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a8:	f000 f970 	bl	800068c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003ac:	f000 f944 	bl	8000638 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80003b0:	f000 f8d6 	bl	8000560 <MX_ADC1_Init>
  MX_I2C1_Init();
 80003b4:	f000 f912 	bl	80005dc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Transmit student number on start-up
  HAL_UART_Transmit(&huart2, stdNum, 10, 1000);
 80003b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003bc:	220a      	movs	r2, #10
 80003be:	4935      	ldr	r1, [pc, #212]	; (8000494 <main+0xf8>)
 80003c0:	4835      	ldr	r0, [pc, #212]	; (8000498 <main+0xfc>)
 80003c2:	f003 fdd0 	bl	8003f66 <HAL_UART_Transmit>

  imu_setup();
 80003c6:	f7ff ff91 	bl	80002ec <imu_setup>

  // Set matrix to display calibration first
  matrixStatus = CALIBRATION;
 80003ca:	4b34      	ldr	r3, [pc, #208]	; (800049c <main+0x100>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	701a      	strb	r2, [r3, #0]
  reset_all_ports(0);
 80003d0:	2000      	movs	r0, #0
 80003d2:	f000 fa81 	bl	80008d8 <reset_all_ports>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Occurs every 100ms
	  if (HAL_GetTick() - last_update_time >= 100) {
 80003d6:	f001 fc63 	bl	8001ca0 <HAL_GetTick>
 80003da:	4602      	mov	r2, r0
 80003dc:	4b30      	ldr	r3, [pc, #192]	; (80004a0 <main+0x104>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	1ad3      	subs	r3, r2, r3
 80003e2:	2b63      	cmp	r3, #99	; 0x63
 80003e4:	d940      	bls.n	8000468 <main+0xcc>
		  // Update last_update_time
		  last_update_time = HAL_GetTick();
 80003e6:	f001 fc5b 	bl	8001ca0 <HAL_GetTick>
 80003ea:	4602      	mov	r2, r0
 80003ec:	4b2c      	ldr	r3, [pc, #176]	; (80004a0 <main+0x104>)
 80003ee:	601a      	str	r2, [r3, #0]

		  if (matrixStatus == CALIBRATION) {
 80003f0:	4b2a      	ldr	r3, [pc, #168]	; (800049c <main+0x100>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d105      	bne.n	8000404 <main+0x68>
			  calibration_sequence();
 80003f8:	f7ff fea8 	bl	800014c <calibration_sequence>
			  matrixStatus = CORNERS;
 80003fc:	4b27      	ldr	r3, [pc, #156]	; (800049c <main+0x100>)
 80003fe:	2201      	movs	r2, #1
 8000400:	701a      	strb	r2, [r3, #0]
 8000402:	e01a      	b.n	800043a <main+0x9e>
		  }
		  else if (matrixStatus == CORNERS) {
 8000404:	4b25      	ldr	r3, [pc, #148]	; (800049c <main+0x100>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b01      	cmp	r3, #1
 800040a:	d102      	bne.n	8000412 <main+0x76>
			  // Light up the four corners
			  light_up_corners();
 800040c:	f7ff feec 	bl	80001e8 <light_up_corners>
 8000410:	e013      	b.n	800043a <main+0x9e>

			  // Update y position from adc
			  read_slider();
		  }
		  */
		  else if (matrixStatus == MAZE_SELECTION) {
 8000412:	4b22      	ldr	r3, [pc, #136]	; (800049c <main+0x100>)
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	2b02      	cmp	r3, #2
 8000418:	d00f      	beq.n	800043a <main+0x9e>

		  }
		  else if (matrixStatus == MAZE) {
 800041a:	4b20      	ldr	r3, [pc, #128]	; (800049c <main+0x100>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b03      	cmp	r3, #3
 8000420:	d105      	bne.n	800042e <main+0x92>
			  load_preset_maze(selected_maze_num);
 8000422:	4b20      	ldr	r3, [pc, #128]	; (80004a4 <main+0x108>)
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	4618      	mov	r0, r3
 8000428:	f000 fb20 	bl	8000a6c <load_preset_maze>
 800042c:	e005      	b.n	800043a <main+0x9e>
		  }

		  else if (matrixStatus == TENNIS) {
 800042e:	4b1b      	ldr	r3, [pc, #108]	; (800049c <main+0x100>)
 8000430:	781b      	ldrb	r3, [r3, #0]
 8000432:	2b04      	cmp	r3, #4
 8000434:	d101      	bne.n	800043a <main+0x9e>
			  // Tennis UART transmit
			  transmit_tennis_uart();
 8000436:	f7ff ff1d 	bl	8000274 <transmit_tennis_uart>
		  }

		  // IMU
		  read_imu();
 800043a:	f7ff ff75 	bl	8000328 <read_imu>
		  update_imu_direction(ax, ay);
 800043e:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <main+0x10c>)
 8000440:	681a      	ldr	r2, [r3, #0]
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <main+0x110>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	4619      	mov	r1, r3
 8000448:	4610      	mov	r0, r2
 800044a:	f000 ff53 	bl	80012f4 <update_imu_direction>
		  if (matrixStatus == TENNIS) {
 800044e:	4b13      	ldr	r3, [pc, #76]	; (800049c <main+0x100>)
 8000450:	781b      	ldrb	r3, [r3, #0]
 8000452:	2b04      	cmp	r3, #4
 8000454:	d102      	bne.n	800045c <main+0xc0>
			  move_bat_imu();
 8000456:	f000 fd69 	bl	8000f2c <move_bat_imu>
 800045a:	e005      	b.n	8000468 <main+0xcc>
		  }
		  else if (matrixStatus == MAZE) {
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <main+0x100>)
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b03      	cmp	r3, #3
 8000462:	d101      	bne.n	8000468 <main+0xcc>
			  move_ball_maze_imu();
 8000464:	f000 fcde 	bl	8000e24 <move_ball_maze_imu>
		  }

	  }

	  // Maze UART Transmit (every 300ms)
	  if ((HAL_GetTick() - maze_uart_last_update_time >= 300) && (matrixStatus == MAZE)) {
 8000468:	f001 fc1a 	bl	8001ca0 <HAL_GetTick>
 800046c:	4602      	mov	r2, r0
 800046e:	4b10      	ldr	r3, [pc, #64]	; (80004b0 <main+0x114>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	1ad3      	subs	r3, r2, r3
 8000474:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000478:	d3ad      	bcc.n	80003d6 <main+0x3a>
 800047a:	4b08      	ldr	r3, [pc, #32]	; (800049c <main+0x100>)
 800047c:	781b      	ldrb	r3, [r3, #0]
 800047e:	2b03      	cmp	r3, #3
 8000480:	d1a9      	bne.n	80003d6 <main+0x3a>
		  transmit_maze_uart();
 8000482:	f7ff fec9 	bl	8000218 <transmit_maze_uart>
		  maze_uart_last_update_time = HAL_GetTick();
 8000486:	f001 fc0b 	bl	8001ca0 <HAL_GetTick>
 800048a:	4602      	mov	r2, r0
 800048c:	4b08      	ldr	r3, [pc, #32]	; (80004b0 <main+0x114>)
 800048e:	601a      	str	r2, [r3, #0]
	  if (HAL_GetTick() - last_update_time >= 100) {
 8000490:	e7a1      	b.n	80003d6 <main+0x3a>
 8000492:	bf00      	nop
 8000494:	20000000 	.word	0x20000000
 8000498:	200003f4 	.word	0x200003f4
 800049c:	2000043d 	.word	0x2000043d
 80004a0:	200002dc 	.word	0x200002dc
 80004a4:	20000034 	.word	0x20000034
 80004a8:	200003e4 	.word	0x200003e4
 80004ac:	20000438 	.word	0x20000438
 80004b0:	200002e0 	.word	0x200002e0

080004b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b094      	sub	sp, #80	; 0x50
 80004b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80004be:	2228      	movs	r2, #40	; 0x28
 80004c0:	2100      	movs	r1, #0
 80004c2:	4618      	mov	r0, r3
 80004c4:	f003 ff30 	bl	8004328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004c8:	f107 0314 	add.w	r3, r7, #20
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
 80004d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	2200      	movs	r2, #0
 80004dc:	601a      	str	r2, [r3, #0]
 80004de:	605a      	str	r2, [r3, #4]
 80004e0:	609a      	str	r2, [r3, #8]
 80004e2:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004e4:	2302      	movs	r3, #2
 80004e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004e8:	2301      	movs	r3, #1
 80004ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ec:	2310      	movs	r3, #16
 80004ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004f0:	2302      	movs	r3, #2
 80004f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80004f4:	2300      	movs	r3, #0
 80004f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80004f8:	2300      	movs	r3, #0
 80004fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000500:	4618      	mov	r0, r3
 8000502:	f003 f811 	bl	8003528 <HAL_RCC_OscConfig>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d001      	beq.n	8000510 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800050c:	f000 f9b2 	bl	8000874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000510:	230f      	movs	r3, #15
 8000512:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000514:	2302      	movs	r3, #2
 8000516:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000518:	2300      	movs	r3, #0
 800051a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800051c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000520:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000522:	2300      	movs	r3, #0
 8000524:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	2100      	movs	r1, #0
 800052c:	4618      	mov	r0, r3
 800052e:	f003 fa7b 	bl	8003a28 <HAL_RCC_ClockConfig>
 8000532:	4603      	mov	r3, r0
 8000534:	2b00      	cmp	r3, #0
 8000536:	d001      	beq.n	800053c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000538:	f000 f99c 	bl	8000874 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800053c:	2302      	movs	r3, #2
 800053e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000544:	1d3b      	adds	r3, r7, #4
 8000546:	4618      	mov	r0, r3
 8000548:	f003 fc0a 	bl	8003d60 <HAL_RCCEx_PeriphCLKConfig>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000552:	f000 f98f 	bl	8000874 <Error_Handler>
  }
}
 8000556:	bf00      	nop
 8000558:	3750      	adds	r7, #80	; 0x50
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
	...

08000560 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000566:	1d3b      	adds	r3, r7, #4
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000570:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <MX_ADC1_Init+0x74>)
 8000572:	4a19      	ldr	r2, [pc, #100]	; (80005d8 <MX_ADC1_Init+0x78>)
 8000574:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000576:	4b17      	ldr	r3, [pc, #92]	; (80005d4 <MX_ADC1_Init+0x74>)
 8000578:	2200      	movs	r2, #0
 800057a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800057c:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <MX_ADC1_Init+0x74>)
 800057e:	2200      	movs	r2, #0
 8000580:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <MX_ADC1_Init+0x74>)
 8000584:	2200      	movs	r2, #0
 8000586:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <MX_ADC1_Init+0x74>)
 800058a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800058e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000590:	4b10      	ldr	r3, [pc, #64]	; (80005d4 <MX_ADC1_Init+0x74>)
 8000592:	2200      	movs	r2, #0
 8000594:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000596:	4b0f      	ldr	r3, [pc, #60]	; (80005d4 <MX_ADC1_Init+0x74>)
 8000598:	2201      	movs	r2, #1
 800059a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800059c:	480d      	ldr	r0, [pc, #52]	; (80005d4 <MX_ADC1_Init+0x74>)
 800059e:	f001 fbab 	bl	8001cf8 <HAL_ADC_Init>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80005a8:	f000 f964 	bl	8000874 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80005ac:	230b      	movs	r3, #11
 80005ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005b0:	2301      	movs	r3, #1
 80005b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005b4:	2300      	movs	r3, #0
 80005b6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b8:	1d3b      	adds	r3, r7, #4
 80005ba:	4619      	mov	r1, r3
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <MX_ADC1_Init+0x74>)
 80005be:	f001 fc73 	bl	8001ea8 <HAL_ADC_ConfigChannel>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80005c8:	f000 f954 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005cc:	bf00      	nop
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	200003b4 	.word	0x200003b4
 80005d8:	40012400 	.word	0x40012400

080005dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <MX_I2C1_Init+0x50>)
 80005e2:	4a13      	ldr	r2, [pc, #76]	; (8000630 <MX_I2C1_Init+0x54>)
 80005e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_I2C1_Init+0x50>)
 80005e8:	4a12      	ldr	r2, [pc, #72]	; (8000634 <MX_I2C1_Init+0x58>)
 80005ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_I2C1_Init+0x50>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_I2C1_Init+0x50>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_I2C1_Init+0x50>)
 80005fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <MX_I2C1_Init+0x50>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_I2C1_Init+0x50>)
 8000608:	2200      	movs	r2, #0
 800060a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <MX_I2C1_Init+0x50>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_I2C1_Init+0x50>)
 8000614:	2200      	movs	r2, #0
 8000616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <MX_I2C1_Init+0x50>)
 800061a:	f002 f819 	bl	8002650 <HAL_I2C_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000624:	f000 f926 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	2000035c 	.word	0x2000035c
 8000630:	40005400 	.word	0x40005400
 8000634:	000186a0 	.word	0x000186a0

08000638 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800063c:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_USART2_UART_Init+0x4c>)
 800063e:	4a12      	ldr	r2, [pc, #72]	; (8000688 <MX_USART2_UART_Init+0x50>)
 8000640:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000642:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_USART2_UART_Init+0x4c>)
 8000644:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000648:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_USART2_UART_Init+0x4c>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_USART2_UART_Init+0x4c>)
 8000652:	2200      	movs	r2, #0
 8000654:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000656:	4b0b      	ldr	r3, [pc, #44]	; (8000684 <MX_USART2_UART_Init+0x4c>)
 8000658:	2200      	movs	r2, #0
 800065a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800065c:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_USART2_UART_Init+0x4c>)
 800065e:	220c      	movs	r2, #12
 8000660:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000662:	4b08      	ldr	r3, [pc, #32]	; (8000684 <MX_USART2_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_USART2_UART_Init+0x4c>)
 800066a:	2200      	movs	r2, #0
 800066c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_USART2_UART_Init+0x4c>)
 8000670:	f003 fc2c 	bl	8003ecc <HAL_UART_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800067a:	f000 f8fb 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200003f4 	.word	0x200003f4
 8000688:	40004400 	.word	0x40004400

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b088      	sub	sp, #32
 8000690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000692:	f107 0310 	add.w	r3, r7, #16
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a0:	4b6d      	ldr	r3, [pc, #436]	; (8000858 <MX_GPIO_Init+0x1cc>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	4a6c      	ldr	r2, [pc, #432]	; (8000858 <MX_GPIO_Init+0x1cc>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6193      	str	r3, [r2, #24]
 80006ac:	4b6a      	ldr	r3, [pc, #424]	; (8000858 <MX_GPIO_Init+0x1cc>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	f003 0310 	and.w	r3, r3, #16
 80006b4:	60fb      	str	r3, [r7, #12]
 80006b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b8:	4b67      	ldr	r3, [pc, #412]	; (8000858 <MX_GPIO_Init+0x1cc>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	4a66      	ldr	r2, [pc, #408]	; (8000858 <MX_GPIO_Init+0x1cc>)
 80006be:	f043 0320 	orr.w	r3, r3, #32
 80006c2:	6193      	str	r3, [r2, #24]
 80006c4:	4b64      	ldr	r3, [pc, #400]	; (8000858 <MX_GPIO_Init+0x1cc>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	f003 0320 	and.w	r3, r3, #32
 80006cc:	60bb      	str	r3, [r7, #8]
 80006ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	4b61      	ldr	r3, [pc, #388]	; (8000858 <MX_GPIO_Init+0x1cc>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a60      	ldr	r2, [pc, #384]	; (8000858 <MX_GPIO_Init+0x1cc>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b5e      	ldr	r3, [pc, #376]	; (8000858 <MX_GPIO_Init+0x1cc>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0304 	and.w	r3, r3, #4
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e8:	4b5b      	ldr	r3, [pc, #364]	; (8000858 <MX_GPIO_Init+0x1cc>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a5a      	ldr	r2, [pc, #360]	; (8000858 <MX_GPIO_Init+0x1cc>)
 80006ee:	f043 0308 	orr.w	r3, r3, #8
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b58      	ldr	r3, [pc, #352]	; (8000858 <MX_GPIO_Init+0x1cc>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f003 0308 	and.w	r3, r3, #8
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, col_1_Pin|row_1_Pin|debug_3_Pin|row_0_Pin 
 8000700:	2200      	movs	r2, #0
 8000702:	f641 51c1 	movw	r1, #7617	; 0x1dc1
 8000706:	4855      	ldr	r0, [pc, #340]	; (800085c <MX_GPIO_Init+0x1d0>)
 8000708:	f001 ff68 	bl	80025dc <HAL_GPIO_WritePin>
                          |col_3_Pin|col_4_Pin|col_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|debug_1_Pin|debug_2_Pin|debug_4_Pin 
 800070c:	2200      	movs	r2, #0
 800070e:	f649 61e0 	movw	r1, #40672	; 0x9ee0
 8000712:	4853      	ldr	r0, [pc, #332]	; (8000860 <MX_GPIO_Init+0x1d4>)
 8000714:	f001 ff62 	bl	80025dc <HAL_GPIO_WritePin>
                          |col_0_Pin|row_3_Pin|row_2_Pin|col_7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, col_2_Pin|row_7_Pin|row_6_Pin|row_5_Pin 
 8000718:	2200      	movs	r2, #0
 800071a:	f641 0107 	movw	r1, #6151	; 0x1807
 800071e:	4851      	ldr	r0, [pc, #324]	; (8000864 <MX_GPIO_Init+0x1d8>)
 8000720:	f001 ff5c 	bl	80025dc <HAL_GPIO_WritePin>
                          |row_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(col_6_GPIO_Port, col_6_Pin, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2104      	movs	r1, #4
 8000728:	484f      	ldr	r0, [pc, #316]	; (8000868 <MX_GPIO_Init+0x1dc>)
 800072a:	f001 ff57 	bl	80025dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800072e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000734:	4b4d      	ldr	r3, [pc, #308]	; (800086c <MX_GPIO_Init+0x1e0>)
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 0310 	add.w	r3, r7, #16
 8000740:	4619      	mov	r1, r3
 8000742:	4846      	ldr	r0, [pc, #280]	; (800085c <MX_GPIO_Init+0x1d0>)
 8000744:	f001 fdf0 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pins : col_1_Pin row_1_Pin debug_3_Pin row_0_Pin 
                           col_3_Pin col_4_Pin col_5_Pin */
  GPIO_InitStruct.Pin = col_1_Pin|row_1_Pin|debug_3_Pin|row_0_Pin 
 8000748:	f641 53c1 	movw	r3, #7617	; 0x1dc1
 800074c:	613b      	str	r3, [r7, #16]
                          |col_3_Pin|col_4_Pin|col_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074e:	2301      	movs	r3, #1
 8000750:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000756:	2302      	movs	r3, #2
 8000758:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	4619      	mov	r1, r3
 8000760:	483e      	ldr	r0, [pc, #248]	; (800085c <MX_GPIO_Init+0x1d0>)
 8000762:	f001 fde1 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pins : button_up_Pin button_down_Pin */
  GPIO_InitStruct.Pin = button_up_Pin|button_down_Pin;
 8000766:	230c      	movs	r3, #12
 8000768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800076a:	4b41      	ldr	r3, [pc, #260]	; (8000870 <MX_GPIO_Init+0x1e4>)
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000772:	f107 0310 	add.w	r3, r7, #16
 8000776:	4619      	mov	r1, r3
 8000778:	4838      	ldr	r0, [pc, #224]	; (800085c <MX_GPIO_Init+0x1d0>)
 800077a:	f001 fdd5 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pins : button_middle_Pin button_right_Pin button_left_Pin */
  GPIO_InitStruct.Pin = button_middle_Pin|button_right_Pin|button_left_Pin;
 800077e:	2313      	movs	r3, #19
 8000780:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000782:	4b3b      	ldr	r3, [pc, #236]	; (8000870 <MX_GPIO_Init+0x1e4>)
 8000784:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078a:	f107 0310 	add.w	r3, r7, #16
 800078e:	4619      	mov	r1, r3
 8000790:	4833      	ldr	r0, [pc, #204]	; (8000860 <MX_GPIO_Init+0x1d4>)
 8000792:	f001 fdc9 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin debug_1_Pin debug_2_Pin debug_4_Pin 
                           col_0_Pin row_3_Pin row_2_Pin col_7_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|debug_1_Pin|debug_2_Pin|debug_4_Pin 
 8000796:	f649 63e0 	movw	r3, #40672	; 0x9ee0
 800079a:	613b      	str	r3, [r7, #16]
                          |col_0_Pin|row_3_Pin|row_2_Pin|col_7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	2301      	movs	r3, #1
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a4:	2302      	movs	r3, #2
 80007a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a8:	f107 0310 	add.w	r3, r7, #16
 80007ac:	4619      	mov	r1, r3
 80007ae:	482c      	ldr	r0, [pc, #176]	; (8000860 <MX_GPIO_Init+0x1d4>)
 80007b0:	f001 fdba 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pins : col_2_Pin row_7_Pin row_6_Pin row_5_Pin 
                           row_4_Pin */
  GPIO_InitStruct.Pin = col_2_Pin|row_7_Pin|row_6_Pin|row_5_Pin 
 80007b4:	f641 0307 	movw	r3, #6151	; 0x1807
 80007b8:	613b      	str	r3, [r7, #16]
                          |row_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2302      	movs	r3, #2
 80007c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	f107 0310 	add.w	r3, r7, #16
 80007ca:	4619      	mov	r1, r3
 80007cc:	4825      	ldr	r0, [pc, #148]	; (8000864 <MX_GPIO_Init+0x1d8>)
 80007ce:	f001 fdab 	bl	8002328 <HAL_GPIO_Init>

  /*Configure GPIO pin : col_6_Pin */
  GPIO_InitStruct.Pin = col_6_Pin;
 80007d2:	2304      	movs	r3, #4
 80007d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2302      	movs	r3, #2
 80007e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(col_6_GPIO_Port, &GPIO_InitStruct);
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	4619      	mov	r1, r3
 80007e8:	481f      	ldr	r0, [pc, #124]	; (8000868 <MX_GPIO_Init+0x1dc>)
 80007ea:	f001 fd9d 	bl	8002328 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	2006      	movs	r0, #6
 80007f4:	f001 fd61 	bl	80022ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007f8:	2006      	movs	r0, #6
 80007fa:	f001 fd7a 	bl	80022f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	2007      	movs	r0, #7
 8000804:	f001 fd59 	bl	80022ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000808:	2007      	movs	r0, #7
 800080a:	f001 fd72 	bl	80022f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2008      	movs	r0, #8
 8000814:	f001 fd51 	bl	80022ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000818:	2008      	movs	r0, #8
 800081a:	f001 fd6a 	bl	80022f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	2009      	movs	r0, #9
 8000824:	f001 fd49 	bl	80022ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000828:	2009      	movs	r0, #9
 800082a:	f001 fd62 	bl	80022f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	200a      	movs	r0, #10
 8000834:	f001 fd41 	bl	80022ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000838:	200a      	movs	r0, #10
 800083a:	f001 fd5a 	bl	80022f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800083e:	2200      	movs	r2, #0
 8000840:	2100      	movs	r1, #0
 8000842:	2028      	movs	r0, #40	; 0x28
 8000844:	f001 fd39 	bl	80022ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000848:	2028      	movs	r0, #40	; 0x28
 800084a:	f001 fd52 	bl	80022f2 <HAL_NVIC_EnableIRQ>

}
 800084e:	bf00      	nop
 8000850:	3720      	adds	r7, #32
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000
 800085c:	40011000 	.word	0x40011000
 8000860:	40010800 	.word	0x40010800
 8000864:	40010c00 	.word	0x40010c00
 8000868:	40011400 	.word	0x40011400
 800086c:	10110000 	.word	0x10110000
 8000870:	10210000 	.word	0x10210000

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <light_up_LED>:


/// Function Definitions ///


void light_up_LED(uint8_t x, uint8_t y) {
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	460a      	mov	r2, r1
 800088a:	71fb      	strb	r3, [r7, #7]
 800088c:	4613      	mov	r3, r2
 800088e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(row_ports[y], row_pins[y], GPIO_PIN_SET);
 8000890:	79bb      	ldrb	r3, [r7, #6]
 8000892:	4a0d      	ldr	r2, [pc, #52]	; (80008c8 <light_up_LED+0x48>)
 8000894:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000898:	79bb      	ldrb	r3, [r7, #6]
 800089a:	4a0c      	ldr	r2, [pc, #48]	; (80008cc <light_up_LED+0x4c>)
 800089c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008a0:	2201      	movs	r2, #1
 80008a2:	4619      	mov	r1, r3
 80008a4:	f001 fe9a 	bl	80025dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(col_ports[x], col_pins[x], GPIO_PIN_SET);
 80008a8:	79fb      	ldrb	r3, [r7, #7]
 80008aa:	4a09      	ldr	r2, [pc, #36]	; (80008d0 <light_up_LED+0x50>)
 80008ac:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4a08      	ldr	r2, [pc, #32]	; (80008d4 <light_up_LED+0x54>)
 80008b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008b8:	2201      	movs	r2, #1
 80008ba:	4619      	mov	r1, r3
 80008bc:	f001 fe8e 	bl	80025dc <HAL_GPIO_WritePin>
}
 80008c0:	bf00      	nop
 80008c2:	3708      	adds	r7, #8
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2000003c 	.word	0x2000003c
 80008cc:	2000005c 	.word	0x2000005c
 80008d0:	2000006c 	.word	0x2000006c
 80008d4:	2000008c 	.word	0x2000008c

080008d8 <reset_all_ports>:

void reset_all_ports(uint8_t isBallSkipped) {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]

	// if isBallSkipped = 1: do not reset the ball
	// if isBallSKipped = 0: reset the ball light as well

	for (int i = 0; i < 8; ++i) {
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	e018      	b.n	800091a <reset_all_ports+0x42>
		if (i != ball_y_pos || !isBallSkipped) {
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <reset_all_ports+0x90>)
 80008ea:	781b      	ldrb	r3, [r3, #0]
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	461a      	mov	r2, r3
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d102      	bne.n	80008fc <reset_all_ports+0x24>
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d10b      	bne.n	8000914 <reset_all_ports+0x3c>
			HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_RESET);
 80008fc:	4a1b      	ldr	r2, [pc, #108]	; (800096c <reset_all_ports+0x94>)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000904:	4a1a      	ldr	r2, [pc, #104]	; (8000970 <reset_all_ports+0x98>)
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800090c:	2200      	movs	r2, #0
 800090e:	4619      	mov	r1, r3
 8000910:	f001 fe64 	bl	80025dc <HAL_GPIO_WritePin>
	for (int i = 0; i < 8; ++i) {
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	3301      	adds	r3, #1
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	2b07      	cmp	r3, #7
 800091e:	dde3      	ble.n	80008e8 <reset_all_ports+0x10>
		}
	}
	for (int i = 0; i < 8; ++i) {
 8000920:	2300      	movs	r3, #0
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	e018      	b.n	8000958 <reset_all_ports+0x80>
		if (i != ball_x_pos || !isBallSkipped) {
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <reset_all_ports+0x9c>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	461a      	mov	r2, r3
 800092e:	68bb      	ldr	r3, [r7, #8]
 8000930:	4293      	cmp	r3, r2
 8000932:	d102      	bne.n	800093a <reset_all_ports+0x62>
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2b00      	cmp	r3, #0
 8000938:	d10b      	bne.n	8000952 <reset_all_ports+0x7a>
			HAL_GPIO_WritePin(col_ports[i], col_pins[i], GPIO_PIN_RESET);
 800093a:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <reset_all_ports+0xa0>)
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000942:	4a0e      	ldr	r2, [pc, #56]	; (800097c <reset_all_ports+0xa4>)
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800094a:	2200      	movs	r2, #0
 800094c:	4619      	mov	r1, r3
 800094e:	f001 fe45 	bl	80025dc <HAL_GPIO_WritePin>
	for (int i = 0; i < 8; ++i) {
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	3301      	adds	r3, #1
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	2b07      	cmp	r3, #7
 800095c:	dde3      	ble.n	8000926 <reset_all_ports+0x4e>
		}
	}

}
 800095e:	bf00      	nop
 8000960:	3710      	adds	r7, #16
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	2000002f 	.word	0x2000002f
 800096c:	2000003c 	.word	0x2000003c
 8000970:	2000005c 	.word	0x2000005c
 8000974:	2000002e 	.word	0x2000002e
 8000978:	2000006c 	.word	0x2000006c
 800097c:	2000008c 	.word	0x2000008c

08000980 <reset_debug_leds>:

// Reset all the debug leds to be off
void reset_debug_leds() {
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
	for (int debug_num = 0; debug_num < 4; ++debug_num) {
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	e00e      	b.n	80009aa <reset_debug_leds+0x2a>
		HAL_GPIO_WritePin(debug_ports[debug_num], debug_pins[debug_num], GPIO_PIN_RESET);
 800098c:	4a0a      	ldr	r2, [pc, #40]	; (80009b8 <reset_debug_leds+0x38>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000994:	4a09      	ldr	r2, [pc, #36]	; (80009bc <reset_debug_leds+0x3c>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800099c:	2200      	movs	r2, #0
 800099e:	4619      	mov	r1, r3
 80009a0:	f001 fe1c 	bl	80025dc <HAL_GPIO_WritePin>
	for (int debug_num = 0; debug_num < 4; ++debug_num) {
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3301      	adds	r3, #1
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	dded      	ble.n	800098c <reset_debug_leds+0xc>
	}
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	2000009c 	.word	0x2000009c
 80009bc:	200000ac 	.word	0x200000ac

080009c0 <light_debug_led>:

// Light up debug led; LED nums are 1,2,3,4
void light_debug_led(int led_num, uint8_t isReset) {
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	70fb      	strb	r3, [r7, #3]
	// isReset = 1: Reset all debug leds first
	// isReset = 0: Leave all debug leds as is
	if (isReset) {
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <light_debug_led+0x16>
		reset_debug_leds();
 80009d2:	f7ff ffd5 	bl	8000980 <reset_debug_leds>
	}
	// If the led_num is not allowed: return
	if (led_num < 1 || led_num > 4) {
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	dd12      	ble.n	8000a02 <light_debug_led+0x42>
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b04      	cmp	r3, #4
 80009e0:	dc0f      	bgt.n	8000a02 <light_debug_led+0x42>
		return;
	}
	else {
		// Turn on the desired debug led
		--led_num;
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	3b01      	subs	r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
		HAL_GPIO_WritePin(debug_ports[led_num], debug_pins[led_num], GPIO_PIN_SET);
 80009e8:	4a08      	ldr	r2, [pc, #32]	; (8000a0c <light_debug_led+0x4c>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009f0:	4a07      	ldr	r2, [pc, #28]	; (8000a10 <light_debug_led+0x50>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009f8:	2201      	movs	r2, #1
 80009fa:	4619      	mov	r1, r3
 80009fc:	f001 fdee 	bl	80025dc <HAL_GPIO_WritePin>
 8000a00:	e000      	b.n	8000a04 <light_debug_led+0x44>
		return;
 8000a02:	bf00      	nop
	}
}
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000009c 	.word	0x2000009c
 8000a10:	200000ac 	.word	0x200000ac

08000a14 <copy_to_display>:



// Copy the passed array to the current display
void copy_to_display(uint8_t buffer[8][8]) {
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 8; ++i) {
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	e01a      	b.n	8000a58 <copy_to_display+0x44>
		for (int j = 0; j < 8; ++j) {
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	e011      	b.n	8000a4c <copy_to_display+0x38>
			display[i][j] = buffer[i][j];
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	00db      	lsls	r3, r3, #3
 8000a2c:	687a      	ldr	r2, [r7, #4]
 8000a2e:	441a      	add	r2, r3
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	4413      	add	r3, r2
 8000a34:	7819      	ldrb	r1, [r3, #0]
 8000a36:	4a0c      	ldr	r2, [pc, #48]	; (8000a68 <copy_to_display+0x54>)
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	00db      	lsls	r3, r3, #3
 8000a3c:	441a      	add	r2, r3
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	4413      	add	r3, r2
 8000a42:	460a      	mov	r2, r1
 8000a44:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 8; ++j) {
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	2b07      	cmp	r3, #7
 8000a50:	ddea      	ble.n	8000a28 <copy_to_display+0x14>
	for (int i = 0; i < 8; ++i) {
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	3301      	adds	r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2b07      	cmp	r3, #7
 8000a5c:	dde1      	ble.n	8000a22 <copy_to_display+0xe>
		}
	}
}
 8000a5e:	bf00      	nop
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr
 8000a68:	200002e8 	.word	0x200002e8

08000a6c <load_preset_maze>:


// Load a preset maze to the display
void load_preset_maze(uint8_t maze_num) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
	if (!should_load_maze_flag) {
 8000a76:	4b1e      	ldr	r3, [pc, #120]	; (8000af0 <load_preset_maze+0x84>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d032      	beq.n	8000ae6 <load_preset_maze+0x7a>
		return;
	}

	// Copy the maze to the display
	copy_to_display(preset_mazes[maze_num - 1]);
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	3b01      	subs	r3, #1
 8000a84:	019b      	lsls	r3, r3, #6
 8000a86:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <load_preset_maze+0x88>)
 8000a88:	4413      	add	r3, r2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff ffc2 	bl	8000a14 <copy_to_display>

	// Set ball position for maze
	for (int row = 0; row < 8; ++row) {
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	e020      	b.n	8000ad8 <load_preset_maze+0x6c>
		for (int col = 0; col < 8; ++col) {
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	e017      	b.n	8000acc <load_preset_maze+0x60>
			if (preset_mazes[maze_num - 1][row][col] == 2) {
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	3b01      	subs	r3, #1
 8000aa0:	4914      	ldr	r1, [pc, #80]	; (8000af4 <load_preset_maze+0x88>)
 8000aa2:	00da      	lsls	r2, r3, #3
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	4413      	add	r3, r2
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	18ca      	adds	r2, r1, r3
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	4413      	add	r3, r2
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b02      	cmp	r3, #2
 8000ab4:	d107      	bne.n	8000ac6 <load_preset_maze+0x5a>
				ball_x_pos = col;
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	b2da      	uxtb	r2, r3
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <load_preset_maze+0x8c>)
 8000abc:	701a      	strb	r2, [r3, #0]
				ball_y_pos = row;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	b2da      	uxtb	r2, r3
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <load_preset_maze+0x90>)
 8000ac4:	701a      	strb	r2, [r3, #0]
		for (int col = 0; col < 8; ++col) {
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	2b07      	cmp	r3, #7
 8000ad0:	dde4      	ble.n	8000a9c <load_preset_maze+0x30>
	for (int row = 0; row < 8; ++row) {
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	3301      	adds	r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2b07      	cmp	r3, #7
 8000adc:	dddb      	ble.n	8000a96 <load_preset_maze+0x2a>
			}
		}
	}
	should_load_maze_flag = 0;
 8000ade:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <load_preset_maze+0x84>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
 8000ae4:	e000      	b.n	8000ae8 <load_preset_maze+0x7c>
		return;
 8000ae6:	bf00      	nop
}
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000032 	.word	0x20000032
 8000af4:	200000b4 	.word	0x200000b4
 8000af8:	2000002e 	.word	0x2000002e
 8000afc:	2000002f 	.word	0x2000002f

08000b00 <load_preset_num_to_display>:

// Load a preset number to the display
void load_preset_num_to_display(uint8_t preset) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
	if (!should_load_num_flag) {
 8000b0a:	4b0b      	ldr	r3, [pc, #44]	; (8000b38 <load_preset_num_to_display+0x38>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d00d      	beq.n	8000b30 <load_preset_num_to_display+0x30>
		return;
	}
	else {
		copy_to_display(preset_numbers[--preset]);
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	3b01      	subs	r3, #1
 8000b18:	71fb      	strb	r3, [r7, #7]
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	019b      	lsls	r3, r3, #6
 8000b1e:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <load_preset_num_to_display+0x3c>)
 8000b20:	4413      	add	r3, r2
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff ff76 	bl	8000a14 <copy_to_display>
		should_load_num_flag = 0;
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <load_preset_num_to_display+0x38>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	701a      	strb	r2, [r3, #0]
 8000b2e:	e000      	b.n	8000b32 <load_preset_num_to_display+0x32>
		return;
 8000b30:	bf00      	nop
	}
}
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000031 	.word	0x20000031
 8000b3c:	200001b4 	.word	0x200001b4

08000b40 <increment_column>:

// Increment the column that should be displayed
void increment_column() {
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
	if (column_to_display < 7) {
 8000b44:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <increment_column+0x2c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b06      	cmp	r3, #6
 8000b4c:	d807      	bhi.n	8000b5e <increment_column+0x1e>
		++column_to_display;
 8000b4e:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <increment_column+0x2c>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	3301      	adds	r3, #1
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <increment_column+0x2c>)
 8000b5a:	701a      	strb	r2, [r3, #0]
	}
	else {
		column_to_display = 0;
	}
}
 8000b5c:	e002      	b.n	8000b64 <increment_column+0x24>
		column_to_display = 0;
 8000b5e:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <increment_column+0x2c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	701a      	strb	r2, [r3, #0]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bc80      	pop	{r7}
 8000b6a:	4770      	bx	lr
 8000b6c:	20000328 	.word	0x20000328

08000b70 <display_matrix>:

// Display the current matrix through column sweeping
void display_matrix() {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b084      	sub	sp, #16
 8000b74:	af00      	add	r7, sp, #0
	// Display MAZE_SELECTION
	if (matrixStatus == MAZE_SELECTION) {
 8000b76:	4b72      	ldr	r3, [pc, #456]	; (8000d40 <display_matrix+0x1d0>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	2b02      	cmp	r3, #2
 8000b7e:	d124      	bne.n	8000bca <display_matrix+0x5a>
		reset_all_ports(0);
 8000b80:	2000      	movs	r0, #0
 8000b82:	f7ff fea9 	bl	80008d8 <reset_all_ports>
		for (int row = 0; row < 8; ++row) {
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	e018      	b.n	8000bbe <display_matrix+0x4e>
			// Leds that make up number
			if (display[row][column_to_display] == 1) {
 8000b8c:	4b6d      	ldr	r3, [pc, #436]	; (8000d44 <display_matrix+0x1d4>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	4619      	mov	r1, r3
 8000b94:	4a6c      	ldr	r2, [pc, #432]	; (8000d48 <display_matrix+0x1d8>)
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	00db      	lsls	r3, r3, #3
 8000b9a:	4413      	add	r3, r2
 8000b9c:	440b      	add	r3, r1
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d108      	bne.n	8000bb8 <display_matrix+0x48>
				light_up_LED(column_to_display, row);
 8000ba6:	4b67      	ldr	r3, [pc, #412]	; (8000d44 <display_matrix+0x1d4>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	4611      	mov	r1, r2
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f7ff fe64 	bl	8000880 <light_up_LED>
		for (int row = 0; row < 8; ++row) {
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	2b07      	cmp	r3, #7
 8000bc2:	dde3      	ble.n	8000b8c <display_matrix+0x1c>
			}
		}
		increment_column();
 8000bc4:	f7ff ffbc 	bl	8000b40 <increment_column>
				light_up_LED(ball_x_pos, ball_y_pos);
			}
		}
		increment_column();
	}
}
 8000bc8:	e0b5      	b.n	8000d36 <display_matrix+0x1c6>
	else if (matrixStatus == MAZE) {
 8000bca:	4b5d      	ldr	r3, [pc, #372]	; (8000d40 <display_matrix+0x1d0>)
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	b2db      	uxtb	r3, r3
 8000bd0:	2b03      	cmp	r3, #3
 8000bd2:	d15f      	bne.n	8000c94 <display_matrix+0x124>
		reset_all_ports(0);
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f7ff fe7f 	bl	80008d8 <reset_all_ports>
		for (int row = 0; row < 8; ++row) {
 8000bda:	2300      	movs	r3, #0
 8000bdc:	60bb      	str	r3, [r7, #8]
 8000bde:	e053      	b.n	8000c88 <display_matrix+0x118>
			if (display[row][column_to_display] == 1) {
 8000be0:	4b58      	ldr	r3, [pc, #352]	; (8000d44 <display_matrix+0x1d4>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	4619      	mov	r1, r3
 8000be8:	4a57      	ldr	r2, [pc, #348]	; (8000d48 <display_matrix+0x1d8>)
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	4413      	add	r3, r2
 8000bf0:	440b      	add	r3, r1
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d109      	bne.n	8000c0e <display_matrix+0x9e>
				light_up_LED(column_to_display, row);
 8000bfa:	4b52      	ldr	r3, [pc, #328]	; (8000d44 <display_matrix+0x1d4>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	68ba      	ldr	r2, [r7, #8]
 8000c02:	b2d2      	uxtb	r2, r2
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff fe3a 	bl	8000880 <light_up_LED>
 8000c0c:	e039      	b.n	8000c82 <display_matrix+0x112>
			else if ((row == ball_y_pos) && (column_to_display == ball_x_pos) && display_matrix_ball_flag) {
 8000c0e:	4b4f      	ldr	r3, [pc, #316]	; (8000d4c <display_matrix+0x1dc>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	461a      	mov	r2, r3
 8000c16:	68bb      	ldr	r3, [r7, #8]
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d117      	bne.n	8000c4c <display_matrix+0xdc>
 8000c1c:	4b49      	ldr	r3, [pc, #292]	; (8000d44 <display_matrix+0x1d4>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	b2da      	uxtb	r2, r3
 8000c22:	4b4b      	ldr	r3, [pc, #300]	; (8000d50 <display_matrix+0x1e0>)
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d10f      	bne.n	8000c4c <display_matrix+0xdc>
 8000c2c:	4b49      	ldr	r3, [pc, #292]	; (8000d54 <display_matrix+0x1e4>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d00a      	beq.n	8000c4c <display_matrix+0xdc>
				light_up_LED(ball_x_pos, ball_y_pos);
 8000c36:	4b46      	ldr	r3, [pc, #280]	; (8000d50 <display_matrix+0x1e0>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	4b43      	ldr	r3, [pc, #268]	; (8000d4c <display_matrix+0x1dc>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	4619      	mov	r1, r3
 8000c44:	4610      	mov	r0, r2
 8000c46:	f7ff fe1b 	bl	8000880 <light_up_LED>
 8000c4a:	e01a      	b.n	8000c82 <display_matrix+0x112>
			else if (display[row][column_to_display] == 3 && display_matrix_end_flag) {
 8000c4c:	4b3d      	ldr	r3, [pc, #244]	; (8000d44 <display_matrix+0x1d4>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	4619      	mov	r1, r3
 8000c54:	4a3c      	ldr	r2, [pc, #240]	; (8000d48 <display_matrix+0x1d8>)
 8000c56:	68bb      	ldr	r3, [r7, #8]
 8000c58:	00db      	lsls	r3, r3, #3
 8000c5a:	4413      	add	r3, r2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b03      	cmp	r3, #3
 8000c64:	d10d      	bne.n	8000c82 <display_matrix+0x112>
 8000c66:	4b3c      	ldr	r3, [pc, #240]	; (8000d58 <display_matrix+0x1e8>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d008      	beq.n	8000c82 <display_matrix+0x112>
				light_up_LED(column_to_display, row);
 8000c70:	4b34      	ldr	r3, [pc, #208]	; (8000d44 <display_matrix+0x1d4>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	b2d2      	uxtb	r2, r2
 8000c7a:	4611      	mov	r1, r2
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fdff 	bl	8000880 <light_up_LED>
		for (int row = 0; row < 8; ++row) {
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	3301      	adds	r3, #1
 8000c86:	60bb      	str	r3, [r7, #8]
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	2b07      	cmp	r3, #7
 8000c8c:	dda8      	ble.n	8000be0 <display_matrix+0x70>
		increment_column();
 8000c8e:	f7ff ff57 	bl	8000b40 <increment_column>
}
 8000c92:	e050      	b.n	8000d36 <display_matrix+0x1c6>
	else if (matrixStatus == TENNIS) {
 8000c94:	4b2a      	ldr	r3, [pc, #168]	; (8000d40 <display_matrix+0x1d0>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	2b04      	cmp	r3, #4
 8000c9c:	d14b      	bne.n	8000d36 <display_matrix+0x1c6>
		reset_all_ports(0);
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f7ff fe1a 	bl	80008d8 <reset_all_ports>
		for (int row = 0; row < 8; ++row) {
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	e040      	b.n	8000d2c <display_matrix+0x1bc>
			if (column_to_display == bat_x_pos && row == bat_y_pos) {
 8000caa:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <display_matrix+0x1d4>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	4b2a      	ldr	r3, [pc, #168]	; (8000d5c <display_matrix+0x1ec>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	429a      	cmp	r2, r3
 8000cb8:	d11c      	bne.n	8000cf4 <display_matrix+0x184>
 8000cba:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <display_matrix+0x1f0>)
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d115      	bne.n	8000cf4 <display_matrix+0x184>
				light_up_LED(bat_x_pos, bat_y_pos);
 8000cc8:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <display_matrix+0x1ec>)
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <display_matrix+0x1f0>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4610      	mov	r0, r2
 8000cd8:	f7ff fdd2 	bl	8000880 <light_up_LED>
				light_up_LED(bat_x_pos, bat_y_pos+1);
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <display_matrix+0x1ec>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	b2da      	uxtb	r2, r3
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <display_matrix+0x1f0>)
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	b2db      	uxtb	r3, r3
 8000ce8:	3301      	adds	r3, #1
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	4619      	mov	r1, r3
 8000cee:	4610      	mov	r0, r2
 8000cf0:	f7ff fdc6 	bl	8000880 <light_up_LED>
			if (column_to_display == ball_x_pos && row == ball_y_pos) {
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <display_matrix+0x1d4>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <display_matrix+0x1e0>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	429a      	cmp	r2, r3
 8000d02:	d110      	bne.n	8000d26 <display_matrix+0x1b6>
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <display_matrix+0x1dc>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d109      	bne.n	8000d26 <display_matrix+0x1b6>
				light_up_LED(ball_x_pos, ball_y_pos);
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <display_matrix+0x1e0>)
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <display_matrix+0x1dc>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4610      	mov	r0, r2
 8000d22:	f7ff fdad 	bl	8000880 <light_up_LED>
		for (int row = 0; row < 8; ++row) {
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b07      	cmp	r3, #7
 8000d30:	ddbb      	ble.n	8000caa <display_matrix+0x13a>
		increment_column();
 8000d32:	f7ff ff05 	bl	8000b40 <increment_column>
}
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	2000043d 	.word	0x2000043d
 8000d44:	20000328 	.word	0x20000328
 8000d48:	200002e8 	.word	0x200002e8
 8000d4c:	2000002f 	.word	0x2000002f
 8000d50:	2000002e 	.word	0x2000002e
 8000d54:	20000329 	.word	0x20000329
 8000d58:	2000032a 	.word	0x2000032a
 8000d5c:	200002e4 	.word	0x200002e4
 8000d60:	20000030 	.word	0x20000030

08000d64 <checkMazeBallMove>:

// Return 1 if the ball can move with the increment and 0.
// Check if end is reached and then set to corners display
uint8_t checkMazeBallMove(int x_increment, int y_increment) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]

	// Ball can only move every 300ms
	if (HAL_GetTick() - ball_maze_move_time <= 300) {
 8000d6e:	f000 ff97 	bl	8001ca0 <HAL_GetTick>
 8000d72:	4602      	mov	r2, r0
 8000d74:	4b25      	ldr	r3, [pc, #148]	; (8000e0c <checkMazeBallMove+0xa8>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000d7e:	d801      	bhi.n	8000d84 <checkMazeBallMove+0x20>
		return 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	e03e      	b.n	8000e02 <checkMazeBallMove+0x9e>
	}

	int new_ball_x = ball_x_pos + x_increment;
 8000d84:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <checkMazeBallMove+0xac>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4413      	add	r3, r2
 8000d90:	60fb      	str	r3, [r7, #12]
	int new_ball_y = ball_y_pos + y_increment;
 8000d92:	4b20      	ldr	r3, [pc, #128]	; (8000e14 <checkMazeBallMove+0xb0>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	461a      	mov	r2, r3
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]

	if (display[new_ball_y][new_ball_x] == 1) { // move blocked by wall
 8000da0:	4a1d      	ldr	r2, [pc, #116]	; (8000e18 <checkMazeBallMove+0xb4>)
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	00db      	lsls	r3, r3, #3
 8000da6:	441a      	add	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4413      	add	r3, r2
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d101      	bne.n	8000db8 <checkMazeBallMove+0x54>
		return 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	e024      	b.n	8000e02 <checkMazeBallMove+0x9e>
	}
	else if (new_ball_x < 0 || new_ball_x > 7) { // out of left or right bounds
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	db02      	blt.n	8000dc4 <checkMazeBallMove+0x60>
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	2b07      	cmp	r3, #7
 8000dc2:	dd01      	ble.n	8000dc8 <checkMazeBallMove+0x64>
		return 0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e01c      	b.n	8000e02 <checkMazeBallMove+0x9e>
	}
	else if (new_ball_y < 0 || new_ball_y > 7) { // out of top or bottom bounds
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db02      	blt.n	8000dd4 <checkMazeBallMove+0x70>
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	2b07      	cmp	r3, #7
 8000dd2:	dd01      	ble.n	8000dd8 <checkMazeBallMove+0x74>
		return 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e014      	b.n	8000e02 <checkMazeBallMove+0x9e>
	}
	else if (display[new_ball_y][new_ball_x] == 3) { // end is reached
 8000dd8:	4a0f      	ldr	r2, [pc, #60]	; (8000e18 <checkMazeBallMove+0xb4>)
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	441a      	add	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4413      	add	r3, r2
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	2b03      	cmp	r3, #3
 8000dea:	d109      	bne.n	8000e00 <checkMazeBallMove+0x9c>
		// Relies on the current loaded display for the end of the maze
		matrixStatus = CORNERS;
 8000dec:	4b0b      	ldr	r3, [pc, #44]	; (8000e1c <checkMazeBallMove+0xb8>)
 8000dee:	2201      	movs	r2, #1
 8000df0:	701a      	strb	r2, [r3, #0]
		reset_debug_leds();
 8000df2:	f7ff fdc5 	bl	8000980 <reset_debug_leds>
		should_load_maze_flag = 1;
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <checkMazeBallMove+0xbc>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	701a      	strb	r2, [r3, #0]
		return 1;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	e000      	b.n	8000e02 <checkMazeBallMove+0x9e>
	}
	else {
		return 1;
 8000e00:	2301      	movs	r3, #1
	}

}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	2000034c 	.word	0x2000034c
 8000e10:	2000002e 	.word	0x2000002e
 8000e14:	2000002f 	.word	0x2000002f
 8000e18:	200002e8 	.word	0x200002e8
 8000e1c:	2000043d 	.word	0x2000043d
 8000e20:	20000032 	.word	0x20000032

08000e24 <move_ball_maze_imu>:

void move_ball_maze_imu() {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
	uint8_t isMoved = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	71fb      	strb	r3, [r7, #7]
	// Check horizontal move
	if (checkMazeBallMove(imu_direction_to_move[0], 0) && imu_direction_to_move[0] != 0) {
 8000e2e:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <move_ball_maze_imu+0x88>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff95 	bl	8000d64 <checkMazeBallMove>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d00f      	beq.n	8000e60 <move_ball_maze_imu+0x3c>
 8000e40:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <move_ball_maze_imu+0x88>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d00b      	beq.n	8000e60 <move_ball_maze_imu+0x3c>
		ball_x_pos += imu_direction_to_move[0];
 8000e48:	4b18      	ldr	r3, [pc, #96]	; (8000eac <move_ball_maze_imu+0x88>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <move_ball_maze_imu+0x8c>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	4413      	add	r3, r2
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <move_ball_maze_imu+0x8c>)
 8000e5a:	701a      	strb	r2, [r3, #0]
		isMoved = 1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	71fb      	strb	r3, [r7, #7]
	}
	// Check vertical move
	if (checkMazeBallMove(0, imu_direction_to_move[1]) && imu_direction_to_move[1] != 0) {
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <move_ball_maze_imu+0x88>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	4619      	mov	r1, r3
 8000e66:	2000      	movs	r0, #0
 8000e68:	f7ff ff7c 	bl	8000d64 <checkMazeBallMove>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d00f      	beq.n	8000e92 <move_ball_maze_imu+0x6e>
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <move_ball_maze_imu+0x88>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d00b      	beq.n	8000e92 <move_ball_maze_imu+0x6e>
		ball_y_pos += imu_direction_to_move[1];
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <move_ball_maze_imu+0x88>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <move_ball_maze_imu+0x90>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4413      	add	r3, r2
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <move_ball_maze_imu+0x90>)
 8000e8c:	701a      	strb	r2, [r3, #0]
		isMoved = 1;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	71fb      	strb	r3, [r7, #7]
	}
	// Update time if moved
	if (isMoved) {
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d004      	beq.n	8000ea2 <move_ball_maze_imu+0x7e>
		ball_maze_move_time = HAL_GetTick();
 8000e98:	f000 ff02 	bl	8001ca0 <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <move_ball_maze_imu+0x94>)
 8000ea0:	601a      	str	r2, [r3, #0]
	}
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	2000032c 	.word	0x2000032c
 8000eb0:	2000002e 	.word	0x2000002e
 8000eb4:	2000002f 	.word	0x2000002f
 8000eb8:	2000034c 	.word	0x2000034c

08000ebc <checkBatMove>:

uint8_t checkBatMove(int x_increment, int y_increment) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]

	// Bat can only move every 100ms
	if (HAL_GetTick() - bat_move_time <= 100) {
 8000ec6:	f000 feeb 	bl	8001ca0 <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <checkBatMove+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b64      	cmp	r3, #100	; 0x64
 8000ed4:	d801      	bhi.n	8000eda <checkBatMove+0x1e>
		return 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	e01e      	b.n	8000f18 <checkBatMove+0x5c>
	}

	int new_bat_x = bat_x_pos + x_increment;
 8000eda:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <checkBatMove+0x68>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	60fb      	str	r3, [r7, #12]
	int new_bat_y = bat_y_pos + y_increment;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <checkBatMove+0x6c>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	461a      	mov	r2, r3
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	60bb      	str	r3, [r7, #8]

	if (new_bat_x < 0 || new_bat_x > 7) { // left/right wall
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	db02      	blt.n	8000f02 <checkBatMove+0x46>
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2b07      	cmp	r3, #7
 8000f00:	dd01      	ble.n	8000f06 <checkBatMove+0x4a>
		return 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e008      	b.n	8000f18 <checkBatMove+0x5c>
	}
	else if (new_bat_y < 0 || new_bat_y > 6) { // top/bottom wall
 8000f06:	68bb      	ldr	r3, [r7, #8]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	db02      	blt.n	8000f12 <checkBatMove+0x56>
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	dd01      	ble.n	8000f16 <checkBatMove+0x5a>
		return 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	e000      	b.n	8000f18 <checkBatMove+0x5c>
	}
	else {
		return 1;
 8000f16:	2301      	movs	r3, #1
	}

}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3710      	adds	r7, #16
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	20000358 	.word	0x20000358
 8000f24:	200002e4 	.word	0x200002e4
 8000f28:	20000030 	.word	0x20000030

08000f2c <move_bat_imu>:

void move_bat_imu() {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
	uint8_t isMoved = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	71fb      	strb	r3, [r7, #7]
	// Check horizontal move
	if (checkBatMove(imu_direction_to_move[0], 0) && imu_direction_to_move[0] != 0) {
 8000f36:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <move_bat_imu+0x88>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff ffbd 	bl	8000ebc <checkBatMove>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d00f      	beq.n	8000f68 <move_bat_imu+0x3c>
 8000f48:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <move_bat_imu+0x88>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d00b      	beq.n	8000f68 <move_bat_imu+0x3c>
		bat_x_pos += imu_direction_to_move[0];
 8000f50:	4b18      	ldr	r3, [pc, #96]	; (8000fb4 <move_bat_imu+0x88>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4b18      	ldr	r3, [pc, #96]	; (8000fb8 <move_bat_imu+0x8c>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	4413      	add	r3, r2
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <move_bat_imu+0x8c>)
 8000f62:	701a      	strb	r2, [r3, #0]
		isMoved = 1;
 8000f64:	2301      	movs	r3, #1
 8000f66:	71fb      	strb	r3, [r7, #7]
	}
	// Check vertical move
	if (checkBatMove(0, imu_direction_to_move[1]) && imu_direction_to_move[1] != 0) {
 8000f68:	4b12      	ldr	r3, [pc, #72]	; (8000fb4 <move_bat_imu+0x88>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f7ff ffa4 	bl	8000ebc <checkBatMove>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d00f      	beq.n	8000f9a <move_bat_imu+0x6e>
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <move_bat_imu+0x88>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00b      	beq.n	8000f9a <move_bat_imu+0x6e>
		bat_y_pos += imu_direction_to_move[1];
 8000f82:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <move_bat_imu+0x88>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <move_bat_imu+0x90>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	4413      	add	r3, r2
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <move_bat_imu+0x90>)
 8000f94:	701a      	strb	r2, [r3, #0]
		isMoved = 1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	71fb      	strb	r3, [r7, #7]
	}
	if (isMoved) { // update time
 8000f9a:	79fb      	ldrb	r3, [r7, #7]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d004      	beq.n	8000faa <move_bat_imu+0x7e>
		bat_move_time = HAL_GetTick();
 8000fa0:	f000 fe7e 	bl	8001ca0 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <move_bat_imu+0x94>)
 8000fa8:	601a      	str	r2, [r3, #0]
	}
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2000032c 	.word	0x2000032c
 8000fb8:	200002e4 	.word	0x200002e4
 8000fbc:	20000030 	.word	0x20000030
 8000fc0:	20000358 	.word	0x20000358

08000fc4 <move_tennis_ball>:

// Move the tennis ball
void move_tennis_ball() {
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
	// 1: West
	// 2: South-East
	// 3: North-East
	// 4: North-East
	// 5: South-West
	int new_ball_x = ball_x_pos;
 8000fca:	4b9b      	ldr	r3, [pc, #620]	; (8001238 <move_tennis_ball+0x274>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	60fb      	str	r3, [r7, #12]
	int new_ball_y = ball_y_pos;
 8000fd2:	4b9a      	ldr	r3, [pc, #616]	; (800123c <move_tennis_ball+0x278>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	60bb      	str	r3, [r7, #8]

	/// Calculate the new ball position ///
	if (tennis_ball_direction == 0 || tennis_ball_direction == 3 || tennis_ball_direction == 5) { // Going left
 8000fda:	4b99      	ldr	r3, [pc, #612]	; (8001240 <move_tennis_ball+0x27c>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d009      	beq.n	8000ff8 <move_tennis_ball+0x34>
 8000fe4:	4b96      	ldr	r3, [pc, #600]	; (8001240 <move_tennis_ball+0x27c>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d004      	beq.n	8000ff8 <move_tennis_ball+0x34>
 8000fee:	4b94      	ldr	r3, [pc, #592]	; (8001240 <move_tennis_ball+0x27c>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b05      	cmp	r3, #5
 8000ff6:	d114      	bne.n	8001022 <move_tennis_ball+0x5e>
		--new_ball_x;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	60fb      	str	r3, [r7, #12]
		if (tennis_ball_direction == 3) { // Up
 8000ffe:	4b90      	ldr	r3, [pc, #576]	; (8001240 <move_tennis_ball+0x27c>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	b2db      	uxtb	r3, r3
 8001004:	2b03      	cmp	r3, #3
 8001006:	d103      	bne.n	8001010 <move_tennis_ball+0x4c>
			--new_ball_y;
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	3b01      	subs	r3, #1
 800100c:	60bb      	str	r3, [r7, #8]
		if (tennis_ball_direction == 3) { // Up
 800100e:	e01d      	b.n	800104c <move_tennis_ball+0x88>
		}
		else if (tennis_ball_direction == 5) { // Down
 8001010:	4b8b      	ldr	r3, [pc, #556]	; (8001240 <move_tennis_ball+0x27c>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b05      	cmp	r3, #5
 8001018:	d118      	bne.n	800104c <move_tennis_ball+0x88>
			++new_ball_y;
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	3301      	adds	r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
		if (tennis_ball_direction == 3) { // Up
 8001020:	e014      	b.n	800104c <move_tennis_ball+0x88>
		}
	}
	else { // Going right
		++new_ball_x;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3301      	adds	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
		if (tennis_ball_direction == 4) { // Up
 8001028:	4b85      	ldr	r3, [pc, #532]	; (8001240 <move_tennis_ball+0x27c>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	b2db      	uxtb	r3, r3
 800102e:	2b04      	cmp	r3, #4
 8001030:	d103      	bne.n	800103a <move_tennis_ball+0x76>
			--new_ball_y;
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	3b01      	subs	r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	e009      	b.n	800104e <move_tennis_ball+0x8a>
		}
		else if (tennis_ball_direction == 2) { // Down
 800103a:	4b81      	ldr	r3, [pc, #516]	; (8001240 <move_tennis_ball+0x27c>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	b2db      	uxtb	r3, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d104      	bne.n	800104e <move_tennis_ball+0x8a>
			++new_ball_y;
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	3301      	adds	r3, #1
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	e000      	b.n	800104e <move_tennis_ball+0x8a>
		if (tennis_ball_direction == 3) { // Up
 800104c:	bf00      	nop
	}



	/// Check for bat collision ///
	uint8_t bat_upper_y = bat_y_pos;
 800104e:	4b7d      	ldr	r3, [pc, #500]	; (8001244 <move_tennis_ball+0x280>)
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
	uint8_t bat_lower_y = bat_y_pos + 1;
 8001054:	4b7b      	ldr	r3, [pc, #492]	; (8001244 <move_tennis_ball+0x280>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	3301      	adds	r3, #1
 800105c:	71bb      	strb	r3, [r7, #6]

	if (new_ball_x == bat_x_pos) { // Same x position: possible collision
 800105e:	4b7a      	ldr	r3, [pc, #488]	; (8001248 <move_tennis_ball+0x284>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	b2db      	uxtb	r3, r3
 8001064:	461a      	mov	r2, r3
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	4293      	cmp	r3, r2
 800106a:	f040 80ae 	bne.w	80011ca <move_tennis_ball+0x206>

		if (tennis_ball_direction == 3) { // diagonally up
 800106e:	4b74      	ldr	r3, [pc, #464]	; (8001240 <move_tennis_ball+0x27c>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	2b03      	cmp	r3, #3
 8001076:	d13a      	bne.n	80010ee <move_tennis_ball+0x12a>

			if (new_ball_y == bat_upper_y) { // leaves diagonally up
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	68ba      	ldr	r2, [r7, #8]
 800107c:	429a      	cmp	r2, r3
 800107e:	d10d      	bne.n	800109c <move_tennis_ball+0xd8>
				tennis_ball_direction = 4;
 8001080:	4b6f      	ldr	r3, [pc, #444]	; (8001240 <move_tennis_ball+0x27c>)
 8001082:	2204      	movs	r2, #4
 8001084:	701a      	strb	r2, [r3, #0]
				new_ball_x += 2;
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	3302      	adds	r3, #2
 800108a:	60fb      	str	r3, [r7, #12]
				++tennis_ball_hit_counter;
 800108c:	4b6f      	ldr	r3, [pc, #444]	; (800124c <move_tennis_ball+0x288>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	3301      	adds	r3, #1
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4b6d      	ldr	r3, [pc, #436]	; (800124c <move_tennis_ball+0x288>)
 8001098:	701a      	strb	r2, [r3, #0]
 800109a:	e096      	b.n	80011ca <move_tennis_ball+0x206>
			}
			else if (new_ball_y == bat_lower_y) { // hits corner; leaves diagonally down
 800109c:	79bb      	ldrb	r3, [r7, #6]
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d110      	bne.n	80010c6 <move_tennis_ball+0x102>
				tennis_ball_direction = 2;
 80010a4:	4b66      	ldr	r3, [pc, #408]	; (8001240 <move_tennis_ball+0x27c>)
 80010a6:	2202      	movs	r2, #2
 80010a8:	701a      	strb	r2, [r3, #0]
				new_ball_y += 2;
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	3302      	adds	r3, #2
 80010ae:	60bb      	str	r3, [r7, #8]
				new_ball_x += 2;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	3302      	adds	r3, #2
 80010b4:	60fb      	str	r3, [r7, #12]
				++tennis_ball_hit_counter;
 80010b6:	4b65      	ldr	r3, [pc, #404]	; (800124c <move_tennis_ball+0x288>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	3301      	adds	r3, #1
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	4b62      	ldr	r3, [pc, #392]	; (800124c <move_tennis_ball+0x288>)
 80010c2:	701a      	strb	r2, [r3, #0]
 80010c4:	e081      	b.n	80011ca <move_tennis_ball+0x206>
			}
			else if (ball_y_pos == bat_upper_y) { // leaves diagonally up
 80010c6:	4b5d      	ldr	r3, [pc, #372]	; (800123c <move_tennis_ball+0x278>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	79fa      	ldrb	r2, [r7, #7]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d17b      	bne.n	80011ca <move_tennis_ball+0x206>
				tennis_ball_direction = 4;
 80010d2:	4b5b      	ldr	r3, [pc, #364]	; (8001240 <move_tennis_ball+0x27c>)
 80010d4:	2204      	movs	r2, #4
 80010d6:	701a      	strb	r2, [r3, #0]
				new_ball_x += 2;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	3302      	adds	r3, #2
 80010dc:	60fb      	str	r3, [r7, #12]
				++tennis_ball_hit_counter;
 80010de:	4b5b      	ldr	r3, [pc, #364]	; (800124c <move_tennis_ball+0x288>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	3301      	adds	r3, #1
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b58      	ldr	r3, [pc, #352]	; (800124c <move_tennis_ball+0x288>)
 80010ea:	701a      	strb	r2, [r3, #0]
 80010ec:	e06d      	b.n	80011ca <move_tennis_ball+0x206>
			}


		}
		else if (tennis_ball_direction == 0) { // perpendicular
 80010ee:	4b54      	ldr	r3, [pc, #336]	; (8001240 <move_tennis_ball+0x27c>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d129      	bne.n	800114c <move_tennis_ball+0x188>

			if (new_ball_y == bat_upper_y) { // leaves diagonally up
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	68ba      	ldr	r2, [r7, #8]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d110      	bne.n	8001122 <move_tennis_ball+0x15e>
				tennis_ball_direction = 4;
 8001100:	4b4f      	ldr	r3, [pc, #316]	; (8001240 <move_tennis_ball+0x27c>)
 8001102:	2204      	movs	r2, #4
 8001104:	701a      	strb	r2, [r3, #0]
				new_ball_y -= 1;
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	3b01      	subs	r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
				new_ball_x += 2;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	3302      	adds	r3, #2
 8001110:	60fb      	str	r3, [r7, #12]
				++tennis_ball_hit_counter;
 8001112:	4b4e      	ldr	r3, [pc, #312]	; (800124c <move_tennis_ball+0x288>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	b2db      	uxtb	r3, r3
 8001118:	3301      	adds	r3, #1
 800111a:	b2da      	uxtb	r2, r3
 800111c:	4b4b      	ldr	r3, [pc, #300]	; (800124c <move_tennis_ball+0x288>)
 800111e:	701a      	strb	r2, [r3, #0]
 8001120:	e053      	b.n	80011ca <move_tennis_ball+0x206>
			}
			else if (new_ball_y == bat_lower_y) { // leaves diagonally down
 8001122:	79bb      	ldrb	r3, [r7, #6]
 8001124:	68ba      	ldr	r2, [r7, #8]
 8001126:	429a      	cmp	r2, r3
 8001128:	d14f      	bne.n	80011ca <move_tennis_ball+0x206>
				tennis_ball_direction = 2;
 800112a:	4b45      	ldr	r3, [pc, #276]	; (8001240 <move_tennis_ball+0x27c>)
 800112c:	2202      	movs	r2, #2
 800112e:	701a      	strb	r2, [r3, #0]
				new_ball_y += 1;
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	3301      	adds	r3, #1
 8001134:	60bb      	str	r3, [r7, #8]
				new_ball_x += 2;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	3302      	adds	r3, #2
 800113a:	60fb      	str	r3, [r7, #12]
				++tennis_ball_hit_counter;
 800113c:	4b43      	ldr	r3, [pc, #268]	; (800124c <move_tennis_ball+0x288>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	3301      	adds	r3, #1
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b41      	ldr	r3, [pc, #260]	; (800124c <move_tennis_ball+0x288>)
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	e03e      	b.n	80011ca <move_tennis_ball+0x206>
			}

		}
		else if (tennis_ball_direction == 5) { // diagonally down
 800114c:	4b3c      	ldr	r3, [pc, #240]	; (8001240 <move_tennis_ball+0x27c>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b05      	cmp	r3, #5
 8001154:	d139      	bne.n	80011ca <move_tennis_ball+0x206>

			if (new_ball_y == bat_lower_y) { // leaves diagonally down
 8001156:	79bb      	ldrb	r3, [r7, #6]
 8001158:	68ba      	ldr	r2, [r7, #8]
 800115a:	429a      	cmp	r2, r3
 800115c:	d10d      	bne.n	800117a <move_tennis_ball+0x1b6>
				tennis_ball_direction = 2;
 800115e:	4b38      	ldr	r3, [pc, #224]	; (8001240 <move_tennis_ball+0x27c>)
 8001160:	2202      	movs	r2, #2
 8001162:	701a      	strb	r2, [r3, #0]
				new_ball_x += 2;
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3302      	adds	r3, #2
 8001168:	60fb      	str	r3, [r7, #12]
				++tennis_ball_hit_counter;
 800116a:	4b38      	ldr	r3, [pc, #224]	; (800124c <move_tennis_ball+0x288>)
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	3301      	adds	r3, #1
 8001172:	b2da      	uxtb	r2, r3
 8001174:	4b35      	ldr	r3, [pc, #212]	; (800124c <move_tennis_ball+0x288>)
 8001176:	701a      	strb	r2, [r3, #0]
 8001178:	e027      	b.n	80011ca <move_tennis_ball+0x206>
			}
			else if (new_ball_y == bat_upper_y) { // hits corner; leaves diagonally up
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	68ba      	ldr	r2, [r7, #8]
 800117e:	429a      	cmp	r2, r3
 8001180:	d110      	bne.n	80011a4 <move_tennis_ball+0x1e0>
				tennis_ball_direction = 4;
 8001182:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <move_tennis_ball+0x27c>)
 8001184:	2204      	movs	r2, #4
 8001186:	701a      	strb	r2, [r3, #0]
				new_ball_y -= 2;
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	3b02      	subs	r3, #2
 800118c:	60bb      	str	r3, [r7, #8]
				new_ball_x += 2;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	3302      	adds	r3, #2
 8001192:	60fb      	str	r3, [r7, #12]
				++tennis_ball_hit_counter;
 8001194:	4b2d      	ldr	r3, [pc, #180]	; (800124c <move_tennis_ball+0x288>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	3301      	adds	r3, #1
 800119c:	b2da      	uxtb	r2, r3
 800119e:	4b2b      	ldr	r3, [pc, #172]	; (800124c <move_tennis_ball+0x288>)
 80011a0:	701a      	strb	r2, [r3, #0]
 80011a2:	e012      	b.n	80011ca <move_tennis_ball+0x206>
			}
			else if (ball_y_pos == bat_lower_y) { // leaves diagonally down
 80011a4:	4b25      	ldr	r3, [pc, #148]	; (800123c <move_tennis_ball+0x278>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	79ba      	ldrb	r2, [r7, #6]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d10c      	bne.n	80011ca <move_tennis_ball+0x206>
				tennis_ball_direction = 2;
 80011b0:	4b23      	ldr	r3, [pc, #140]	; (8001240 <move_tennis_ball+0x27c>)
 80011b2:	2202      	movs	r2, #2
 80011b4:	701a      	strb	r2, [r3, #0]
				new_ball_x += 2;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	3302      	adds	r3, #2
 80011ba:	60fb      	str	r3, [r7, #12]
				++tennis_ball_hit_counter;
 80011bc:	4b23      	ldr	r3, [pc, #140]	; (800124c <move_tennis_ball+0x288>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	3301      	adds	r3, #1
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b21      	ldr	r3, [pc, #132]	; (800124c <move_tennis_ball+0x288>)
 80011c8:	701a      	strb	r2, [r3, #0]



	/// Check for wall collision and calculate new direction ///
	/// and new position                                     ///
	if (new_ball_x > 7) { // Hit right wall
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	2b07      	cmp	r3, #7
 80011ce:	dd1b      	ble.n	8001208 <move_tennis_ball+0x244>
		if (tennis_ball_direction == 4) {
 80011d0:	4b1b      	ldr	r3, [pc, #108]	; (8001240 <move_tennis_ball+0x27c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d103      	bne.n	80011e2 <move_tennis_ball+0x21e>
			tennis_ball_direction = 3;
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <move_tennis_ball+0x27c>)
 80011dc:	2203      	movs	r2, #3
 80011de:	701a      	strb	r2, [r3, #0]
 80011e0:	e010      	b.n	8001204 <move_tennis_ball+0x240>
		}
		else if (tennis_ball_direction == 1) {
 80011e2:	4b17      	ldr	r3, [pc, #92]	; (8001240 <move_tennis_ball+0x27c>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d103      	bne.n	80011f4 <move_tennis_ball+0x230>
			tennis_ball_direction = 0;
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <move_tennis_ball+0x27c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	701a      	strb	r2, [r3, #0]
 80011f2:	e007      	b.n	8001204 <move_tennis_ball+0x240>
		}
		else if (tennis_ball_direction == 2) {
 80011f4:	4b12      	ldr	r3, [pc, #72]	; (8001240 <move_tennis_ball+0x27c>)
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d102      	bne.n	8001204 <move_tennis_ball+0x240>
			tennis_ball_direction = 5;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <move_tennis_ball+0x27c>)
 8001200:	2205      	movs	r2, #5
 8001202:	701a      	strb	r2, [r3, #0]
		}
		new_ball_x = 6;
 8001204:	2306      	movs	r3, #6
 8001206:	60fb      	str	r3, [r7, #12]
	}
	if (new_ball_y > 7) { // Hit bottom
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	2b07      	cmp	r3, #7
 800120c:	dd20      	ble.n	8001250 <move_tennis_ball+0x28c>
		if (tennis_ball_direction == 5) {
 800120e:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <move_tennis_ball+0x27c>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b05      	cmp	r3, #5
 8001216:	d103      	bne.n	8001220 <move_tennis_ball+0x25c>
			tennis_ball_direction = 3;
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <move_tennis_ball+0x27c>)
 800121a:	2203      	movs	r2, #3
 800121c:	701a      	strb	r2, [r3, #0]
 800121e:	e007      	b.n	8001230 <move_tennis_ball+0x26c>
		}
		else if (tennis_ball_direction == 2) {
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <move_tennis_ball+0x27c>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d102      	bne.n	8001230 <move_tennis_ball+0x26c>
			tennis_ball_direction = 4;
 800122a:	4b05      	ldr	r3, [pc, #20]	; (8001240 <move_tennis_ball+0x27c>)
 800122c:	2204      	movs	r2, #4
 800122e:	701a      	strb	r2, [r3, #0]
		}
		new_ball_y = 6;
 8001230:	2306      	movs	r3, #6
 8001232:	60bb      	str	r3, [r7, #8]
 8001234:	e022      	b.n	800127c <move_tennis_ball+0x2b8>
 8001236:	bf00      	nop
 8001238:	2000002e 	.word	0x2000002e
 800123c:	2000002f 	.word	0x2000002f
 8001240:	2000043c 	.word	0x2000043c
 8001244:	20000030 	.word	0x20000030
 8001248:	200002e4 	.word	0x200002e4
 800124c:	2000032b 	.word	0x2000032b
	}
	else if (new_ball_y < 0) { // Hit top
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	2b00      	cmp	r3, #0
 8001254:	da12      	bge.n	800127c <move_tennis_ball+0x2b8>
		if (tennis_ball_direction == 3) {
 8001256:	4b21      	ldr	r3, [pc, #132]	; (80012dc <move_tennis_ball+0x318>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	b2db      	uxtb	r3, r3
 800125c:	2b03      	cmp	r3, #3
 800125e:	d103      	bne.n	8001268 <move_tennis_ball+0x2a4>
			tennis_ball_direction = 5;
 8001260:	4b1e      	ldr	r3, [pc, #120]	; (80012dc <move_tennis_ball+0x318>)
 8001262:	2205      	movs	r2, #5
 8001264:	701a      	strb	r2, [r3, #0]
 8001266:	e007      	b.n	8001278 <move_tennis_ball+0x2b4>
		}
		else if (tennis_ball_direction == 4) {
 8001268:	4b1c      	ldr	r3, [pc, #112]	; (80012dc <move_tennis_ball+0x318>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b04      	cmp	r3, #4
 8001270:	d102      	bne.n	8001278 <move_tennis_ball+0x2b4>
			tennis_ball_direction = 2;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <move_tennis_ball+0x318>)
 8001274:	2202      	movs	r2, #2
 8001276:	701a      	strb	r2, [r3, #0]
		}
		new_ball_y = 1;
 8001278:	2301      	movs	r3, #1
 800127a:	60bb      	str	r3, [r7, #8]
	}


	// Check for lose (left wall collision)
	if (new_ball_x < 0) {
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	da0b      	bge.n	800129a <move_tennis_ball+0x2d6>
		matrixStatus = CORNERS;
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <move_tennis_ball+0x31c>)
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
		tennis_ball_hit_counter = 0;
 8001288:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <move_tennis_ball+0x320>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
		tennis_ball_velocity = 1;
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <move_tennis_ball+0x324>)
 8001290:	2201      	movs	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]
		tennis_ball_direction = 0;
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <move_tennis_ball+0x318>)
 8001296:	2200      	movs	r2, #0
 8001298:	701a      	strb	r2, [r3, #0]
	}


	// Finally update ball position
	ball_x_pos = new_ball_x;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	b2da      	uxtb	r2, r3
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <move_tennis_ball+0x328>)
 80012a0:	701a      	strb	r2, [r3, #0]
	ball_y_pos = new_ball_y;
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	b2da      	uxtb	r2, r3
 80012a6:	4b12      	ldr	r3, [pc, #72]	; (80012f0 <move_tennis_ball+0x32c>)
 80012a8:	701a      	strb	r2, [r3, #0]

	// Check the hit counter
	if (tennis_ball_hit_counter >= 3) {
 80012aa:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <move_tennis_ball+0x320>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d90e      	bls.n	80012d2 <move_tennis_ball+0x30e>
		if (tennis_ball_velocity < 10) {
 80012b4:	4b0c      	ldr	r3, [pc, #48]	; (80012e8 <move_tennis_ball+0x324>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b09      	cmp	r3, #9
 80012bc:	d806      	bhi.n	80012cc <move_tennis_ball+0x308>
			++tennis_ball_velocity;
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <move_tennis_ball+0x324>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	3301      	adds	r3, #1
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <move_tennis_ball+0x324>)
 80012ca:	701a      	strb	r2, [r3, #0]
		}
		tennis_ball_hit_counter = 0;
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <move_tennis_ball+0x320>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]
	}

}
 80012d2:	bf00      	nop
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	2000043c 	.word	0x2000043c
 80012e0:	2000043d 	.word	0x2000043d
 80012e4:	2000032b 	.word	0x2000032b
 80012e8:	2000003a 	.word	0x2000003a
 80012ec:	2000002e 	.word	0x2000002e
 80012f0:	2000002f 	.word	0x2000002f

080012f4 <update_imu_direction>:

void update_imu_direction(int imu_x, int imu_y) {
 80012f4:	b480      	push	{r7}
 80012f6:	b085      	sub	sp, #20
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
 80012fc:	6039      	str	r1, [r7, #0]

	imu_direction_to_move[0] = 0;
 80012fe:	4b1d      	ldr	r3, [pc, #116]	; (8001374 <update_imu_direction+0x80>)
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
	imu_direction_to_move[1] = 0;
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <update_imu_direction+0x80>)
 8001306:	2200      	movs	r2, #0
 8001308:	605a      	str	r2, [r3, #4]

	uint8_t IMU_dir_transmit = 'N';
 800130a:	234e      	movs	r3, #78	; 0x4e
 800130c:	73fb      	strb	r3, [r7, #15]

	if (imu_x >= 8192) { // Left
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001314:	db06      	blt.n	8001324 <update_imu_direction+0x30>
		imu_direction_to_move[0] = -1;
 8001316:	4b17      	ldr	r3, [pc, #92]	; (8001374 <update_imu_direction+0x80>)
 8001318:	f04f 32ff 	mov.w	r2, #4294967295
 800131c:	601a      	str	r2, [r3, #0]
		IMU_dir_transmit = 'L';
 800131e:	234c      	movs	r3, #76	; 0x4c
 8001320:	73fb      	strb	r3, [r7, #15]
 8001322:	e008      	b.n	8001336 <update_imu_direction+0x42>
	}
	else if (imu_x <= -8192) { // Right
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800132a:	dc04      	bgt.n	8001336 <update_imu_direction+0x42>
		imu_direction_to_move[0] = 1;
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <update_imu_direction+0x80>)
 800132e:	2201      	movs	r2, #1
 8001330:	601a      	str	r2, [r3, #0]
		IMU_dir_transmit = 'R';
 8001332:	2352      	movs	r3, #82	; 0x52
 8001334:	73fb      	strb	r3, [r7, #15]
	}

	if (imu_y >= 8192) { // Down
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800133c:	db05      	blt.n	800134a <update_imu_direction+0x56>
		imu_direction_to_move[1] = 1;
 800133e:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <update_imu_direction+0x80>)
 8001340:	2201      	movs	r2, #1
 8001342:	605a      	str	r2, [r3, #4]
		IMU_dir_transmit = 'D';
 8001344:	2344      	movs	r3, #68	; 0x44
 8001346:	73fb      	strb	r3, [r7, #15]
 8001348:	e009      	b.n	800135e <update_imu_direction+0x6a>
	}
	else if (imu_y <= -8192) { // Up
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 8001350:	dc05      	bgt.n	800135e <update_imu_direction+0x6a>
		imu_direction_to_move[1] = -1;
 8001352:	4b08      	ldr	r3, [pc, #32]	; (8001374 <update_imu_direction+0x80>)
 8001354:	f04f 32ff 	mov.w	r2, #4294967295
 8001358:	605a      	str	r2, [r3, #4]
		IMU_dir_transmit = 'U';
 800135a:	2355      	movs	r3, #85	; 0x55
 800135c:	73fb      	strb	r3, [r7, #15]
	}

	// Update MAZE UART
	maze[6] = IMU_dir_transmit;
 800135e:	4a06      	ldr	r2, [pc, #24]	; (8001378 <update_imu_direction+0x84>)
 8001360:	7bfb      	ldrb	r3, [r7, #15]
 8001362:	7193      	strb	r3, [r2, #6]

	// Update TENNIS UART
	tennis[8] = IMU_dir_transmit;
 8001364:	4a05      	ldr	r2, [pc, #20]	; (800137c <update_imu_direction+0x88>)
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	7213      	strb	r3, [r2, #8]

	return;
 800136a:	bf00      	nop
}
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	bc80      	pop	{r7}
 8001372:	4770      	bx	lr
 8001374:	2000032c 	.word	0x2000032c
 8001378:	20000018 	.word	0x20000018
 800137c:	20000024 	.word	0x20000024

08001380 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <HAL_MspInit+0x5c>)
 8001388:	699b      	ldr	r3, [r3, #24]
 800138a:	4a14      	ldr	r2, [pc, #80]	; (80013dc <HAL_MspInit+0x5c>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6193      	str	r3, [r2, #24]
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <HAL_MspInit+0x5c>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <HAL_MspInit+0x5c>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <HAL_MspInit+0x5c>)
 80013a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a8:	61d3      	str	r3, [r2, #28]
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <HAL_MspInit+0x5c>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_MspInit+0x60>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <HAL_MspInit+0x60>)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d2:	bf00      	nop
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010000 	.word	0x40010000

080013e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b088      	sub	sp, #32
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0310 	add.w	r3, r7, #16
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a14      	ldr	r2, [pc, #80]	; (8001450 <HAL_ADC_MspInit+0x6c>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d121      	bne.n	8001448 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001404:	4b13      	ldr	r3, [pc, #76]	; (8001454 <HAL_ADC_MspInit+0x70>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a12      	ldr	r2, [pc, #72]	; (8001454 <HAL_ADC_MspInit+0x70>)
 800140a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800140e:	6193      	str	r3, [r2, #24]
 8001410:	4b10      	ldr	r3, [pc, #64]	; (8001454 <HAL_ADC_MspInit+0x70>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141c:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <HAL_ADC_MspInit+0x70>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4a0c      	ldr	r2, [pc, #48]	; (8001454 <HAL_ADC_MspInit+0x70>)
 8001422:	f043 0310 	orr.w	r3, r3, #16
 8001426:	6193      	str	r3, [r2, #24]
 8001428:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_ADC_MspInit+0x70>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 0310 	and.w	r3, r3, #16
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PC1     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001434:	2302      	movs	r3, #2
 8001436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001438:	2303      	movs	r3, #3
 800143a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800143c:	f107 0310 	add.w	r3, r7, #16
 8001440:	4619      	mov	r1, r3
 8001442:	4805      	ldr	r0, [pc, #20]	; (8001458 <HAL_ADC_MspInit+0x74>)
 8001444:	f000 ff70 	bl	8002328 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001448:	bf00      	nop
 800144a:	3720      	adds	r7, #32
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40012400 	.word	0x40012400
 8001454:	40021000 	.word	0x40021000
 8001458:	40011000 	.word	0x40011000

0800145c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b088      	sub	sp, #32
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a15      	ldr	r2, [pc, #84]	; (80014cc <HAL_I2C_MspInit+0x70>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d123      	bne.n	80014c4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <HAL_I2C_MspInit+0x74>)
 800147e:	699b      	ldr	r3, [r3, #24]
 8001480:	4a13      	ldr	r2, [pc, #76]	; (80014d0 <HAL_I2C_MspInit+0x74>)
 8001482:	f043 0308 	orr.w	r3, r3, #8
 8001486:	6193      	str	r3, [r2, #24]
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <HAL_I2C_MspInit+0x74>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f003 0308 	and.w	r3, r3, #8
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001494:	23c0      	movs	r3, #192	; 0xc0
 8001496:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001498:	2312      	movs	r3, #18
 800149a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800149c:	2303      	movs	r3, #3
 800149e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a0:	f107 0310 	add.w	r3, r7, #16
 80014a4:	4619      	mov	r1, r3
 80014a6:	480b      	ldr	r0, [pc, #44]	; (80014d4 <HAL_I2C_MspInit+0x78>)
 80014a8:	f000 ff3e 	bl	8002328 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <HAL_I2C_MspInit+0x74>)
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	4a07      	ldr	r2, [pc, #28]	; (80014d0 <HAL_I2C_MspInit+0x74>)
 80014b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b6:	61d3      	str	r3, [r2, #28]
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <HAL_I2C_MspInit+0x74>)
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014c4:	bf00      	nop
 80014c6:	3720      	adds	r7, #32
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40005400 	.word	0x40005400
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40010c00 	.word	0x40010c00

080014d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 0310 	add.w	r3, r7, #16
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a1b      	ldr	r2, [pc, #108]	; (8001560 <HAL_UART_MspInit+0x88>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d12f      	bne.n	8001558 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <HAL_UART_MspInit+0x8c>)
 80014fa:	69db      	ldr	r3, [r3, #28]
 80014fc:	4a19      	ldr	r2, [pc, #100]	; (8001564 <HAL_UART_MspInit+0x8c>)
 80014fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001502:	61d3      	str	r3, [r2, #28]
 8001504:	4b17      	ldr	r3, [pc, #92]	; (8001564 <HAL_UART_MspInit+0x8c>)
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <HAL_UART_MspInit+0x8c>)
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	4a13      	ldr	r2, [pc, #76]	; (8001564 <HAL_UART_MspInit+0x8c>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	6193      	str	r3, [r2, #24]
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <HAL_UART_MspInit+0x8c>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	60bb      	str	r3, [r7, #8]
 8001526:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001528:	2304      	movs	r3, #4
 800152a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152c:	2302      	movs	r3, #2
 800152e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001534:	f107 0310 	add.w	r3, r7, #16
 8001538:	4619      	mov	r1, r3
 800153a:	480b      	ldr	r0, [pc, #44]	; (8001568 <HAL_UART_MspInit+0x90>)
 800153c:	f000 fef4 	bl	8002328 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART_RX_Pin;
 8001540:	2308      	movs	r3, #8
 8001542:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	4619      	mov	r1, r3
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <HAL_UART_MspInit+0x90>)
 8001554:	f000 fee8 	bl	8002328 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001558:	bf00      	nop
 800155a:	3720      	adds	r7, #32
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	40004400 	.word	0x40004400
 8001564:	40021000 	.word	0x40021000
 8001568:	40010800 	.word	0x40010800

0800156c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr

08001578 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <HardFault_Handler+0x4>

0800157e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001582:	e7fe      	b.n	8001582 <MemManage_Handler+0x4>

08001584 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001588:	e7fe      	b.n	8001588 <BusFault_Handler+0x4>

0800158a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158a:	b480      	push	{r7}
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800158e:	e7fe      	b.n	800158e <UsageFault_Handler+0x4>

08001590 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr

080015a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ac:	bf00      	nop
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr

080015b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if (matrixStatus == MAZE_SELECTION) {
 80015b8:	4b39      	ldr	r3, [pc, #228]	; (80016a0 <SysTick_Handler+0xec>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d10e      	bne.n	80015de <SysTick_Handler+0x2a>
		// Update debug led
		light_debug_led(selected_maze_num, 1);
 80015c0:	4b38      	ldr	r3, [pc, #224]	; (80016a4 <SysTick_Handler+0xf0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	2101      	movs	r1, #1
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff f9fa 	bl	80009c0 <light_debug_led>
		// Display maze number on matrix
		load_preset_num_to_display(selected_maze_num);
 80015cc:	4b35      	ldr	r3, [pc, #212]	; (80016a4 <SysTick_Handler+0xf0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fa94 	bl	8000b00 <load_preset_num_to_display>
		display_matrix();
 80015d8:	f7ff faca 	bl	8000b70 <display_matrix>
 80015dc:	e05b      	b.n	8001696 <SysTick_Handler+0xe2>
	}
	else if (matrixStatus == MAZE) {
 80015de:	4b30      	ldr	r3, [pc, #192]	; (80016a0 <SysTick_Handler+0xec>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b03      	cmp	r3, #3
 80015e4:	d137      	bne.n	8001656 <SysTick_Handler+0xa2>
		// Update matrix ball display flag every 300ms
		if (HAL_GetTick() - ball_matrix_time >= 300) {
 80015e6:	f000 fb5b 	bl	8001ca0 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	4b2e      	ldr	r3, [pc, #184]	; (80016a8 <SysTick_Handler+0xf4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80015f6:	d30e      	bcc.n	8001616 <SysTick_Handler+0x62>
			display_matrix_ball_flag = !display_matrix_ball_flag;
 80015f8:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <SysTick_Handler+0xf8>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf0c      	ite	eq
 8001600:	2301      	moveq	r3, #1
 8001602:	2300      	movne	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	461a      	mov	r2, r3
 8001608:	4b28      	ldr	r3, [pc, #160]	; (80016ac <SysTick_Handler+0xf8>)
 800160a:	701a      	strb	r2, [r3, #0]
			ball_matrix_time = HAL_GetTick();
 800160c:	f000 fb48 	bl	8001ca0 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	4b25      	ldr	r3, [pc, #148]	; (80016a8 <SysTick_Handler+0xf4>)
 8001614:	601a      	str	r2, [r3, #0]
		}
		// Update matrix end display flag every 100ms
		if (HAL_GetTick() - end_matrix_time >= 100) {
 8001616:	f000 fb43 	bl	8001ca0 <HAL_GetTick>
 800161a:	4602      	mov	r2, r0
 800161c:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <SysTick_Handler+0xfc>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b63      	cmp	r3, #99	; 0x63
 8001624:	d90e      	bls.n	8001644 <SysTick_Handler+0x90>
			display_matrix_end_flag = !display_matrix_end_flag;
 8001626:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <SysTick_Handler+0x100>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	bf0c      	ite	eq
 800162e:	2301      	moveq	r3, #1
 8001630:	2300      	movne	r3, #0
 8001632:	b2db      	uxtb	r3, r3
 8001634:	461a      	mov	r2, r3
 8001636:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <SysTick_Handler+0x100>)
 8001638:	701a      	strb	r2, [r3, #0]
			end_matrix_time = HAL_GetTick();
 800163a:	f000 fb31 	bl	8001ca0 <HAL_GetTick>
 800163e:	4602      	mov	r2, r0
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <SysTick_Handler+0xfc>)
 8001642:	601a      	str	r2, [r3, #0]
		}
		display_matrix();
 8001644:	f7ff fa94 	bl	8000b70 <display_matrix>
		light_debug_led(selected_maze_num, 1); // Keep light on for selected maze
 8001648:	4b16      	ldr	r3, [pc, #88]	; (80016a4 <SysTick_Handler+0xf0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2101      	movs	r1, #1
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff f9b6 	bl	80009c0 <light_debug_led>
 8001654:	e01f      	b.n	8001696 <SysTick_Handler+0xe2>
	}
	else if (matrixStatus == TENNIS) {
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <SysTick_Handler+0xec>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b04      	cmp	r3, #4
 800165c:	d11b      	bne.n	8001696 <SysTick_Handler+0xe2>
		display_matrix();
 800165e:	f7ff fa87 	bl	8000b70 <display_matrix>
		if (HAL_GetTick() - tennis_ball_move_time >= (tennis_ball_timeout_time - ( 50*(tennis_ball_velocity - 1) ) ) ) {
 8001662:	f000 fb1d 	bl	8001ca0 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	4b13      	ldr	r3, [pc, #76]	; (80016b8 <SysTick_Handler+0x104>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	4a13      	ldr	r2, [pc, #76]	; (80016bc <SysTick_Handler+0x108>)
 8001670:	8812      	ldrh	r2, [r2, #0]
 8001672:	4610      	mov	r0, r2
 8001674:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <SysTick_Handler+0x10c>)
 8001676:	7812      	ldrb	r2, [r2, #0]
 8001678:	3a01      	subs	r2, #1
 800167a:	f06f 0131 	mvn.w	r1, #49	; 0x31
 800167e:	fb01 f202 	mul.w	r2, r1, r2
 8001682:	4402      	add	r2, r0
 8001684:	4293      	cmp	r3, r2
 8001686:	d306      	bcc.n	8001696 <SysTick_Handler+0xe2>
			move_tennis_ball();
 8001688:	f7ff fc9c 	bl	8000fc4 <move_tennis_ball>
			tennis_ball_move_time = HAL_GetTick();
 800168c:	f000 fb08 	bl	8001ca0 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <SysTick_Handler+0x104>)
 8001694:	601a      	str	r2, [r3, #0]
		}
	}


  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001696:	f000 faf1 	bl	8001c7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	2000043d 	.word	0x2000043d
 80016a4:	20000034 	.word	0x20000034
 80016a8:	20000348 	.word	0x20000348
 80016ac:	20000329 	.word	0x20000329
 80016b0:	20000350 	.word	0x20000350
 80016b4:	2000032a 	.word	0x2000032a
 80016b8:	20000354 	.word	0x20000354
 80016bc:	20000038 	.word	0x20000038
 80016c0:	2000003a 	.word	0x2000003a

080016c4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	// middle
	if (HAL_GetTick() - button_middle_time >= 150) {
 80016c8:	f000 faea 	bl	8001ca0 <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	4b35      	ldr	r3, [pc, #212]	; (80017a4 <EXTI0_IRQHandler+0xe0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b95      	cmp	r3, #149	; 0x95
 80016d6:	d960      	bls.n	800179a <EXTI0_IRQHandler+0xd6>
		// Update time
		button_middle_time = HAL_GetTick();
 80016d8:	f000 fae2 	bl	8001ca0 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <EXTI0_IRQHandler+0xe0>)
 80016e0:	601a      	str	r2, [r3, #0]
		// Change matrix status
		if (matrixStatus == MAZE_SELECTION) { // Maze has been selected
 80016e2:	4b31      	ldr	r3, [pc, #196]	; (80017a8 <EXTI0_IRQHandler+0xe4>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d119      	bne.n	800171e <EXTI0_IRQHandler+0x5a>
			light_debug_led(selected_maze_num, 1); // To keep debug on
 80016ea:	4b30      	ldr	r3, [pc, #192]	; (80017ac <EXTI0_IRQHandler+0xe8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2101      	movs	r1, #1
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff f965 	bl	80009c0 <light_debug_led>
			matrixStatus = MAZE; // Change to MAZE
 80016f6:	4b2c      	ldr	r3, [pc, #176]	; (80017a8 <EXTI0_IRQHandler+0xe4>)
 80016f8:	2203      	movs	r2, #3
 80016fa:	701a      	strb	r2, [r3, #0]
			display_matrix_ball_flag = 1; // Reset flag
 80016fc:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <EXTI0_IRQHandler+0xec>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
			display_matrix_end_flag = 1; // Reset flag
 8001702:	4b2c      	ldr	r3, [pc, #176]	; (80017b4 <EXTI0_IRQHandler+0xf0>)
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
			end_matrix_time = HAL_GetTick(); // Reset timer counter
 8001708:	f000 faca 	bl	8001ca0 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	4b2a      	ldr	r3, [pc, #168]	; (80017b8 <EXTI0_IRQHandler+0xf4>)
 8001710:	601a      	str	r2, [r3, #0]
			ball_matrix_time = HAL_GetTick(); // Reset timer counter
 8001712:	f000 fac5 	bl	8001ca0 <HAL_GetTick>
 8001716:	4602      	mov	r2, r0
 8001718:	4b28      	ldr	r3, [pc, #160]	; (80017bc <EXTI0_IRQHandler+0xf8>)
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	e03d      	b.n	800179a <EXTI0_IRQHandler+0xd6>
			//imu_setup_flag = 1;
		}
		else if (matrixStatus == CORNERS) {
 800171e:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <EXTI0_IRQHandler+0xe4>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d11c      	bne.n	8001760 <EXTI0_IRQHandler+0x9c>
			matrixStatus = TENNIS;
 8001726:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <EXTI0_IRQHandler+0xe4>)
 8001728:	2204      	movs	r2, #4
 800172a:	701a      	strb	r2, [r3, #0]
			ball_x_pos = 7;
 800172c:	4b24      	ldr	r3, [pc, #144]	; (80017c0 <EXTI0_IRQHandler+0xfc>)
 800172e:	2207      	movs	r2, #7
 8001730:	701a      	strb	r2, [r3, #0]
			ball_y_pos = 4;
 8001732:	4b24      	ldr	r3, [pc, #144]	; (80017c4 <EXTI0_IRQHandler+0x100>)
 8001734:	2204      	movs	r2, #4
 8001736:	701a      	strb	r2, [r3, #0]
			bat_x_pos = 0;
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <EXTI0_IRQHandler+0x104>)
 800173a:	2200      	movs	r2, #0
 800173c:	701a      	strb	r2, [r3, #0]
			bat_y_pos = 4;
 800173e:	4b23      	ldr	r3, [pc, #140]	; (80017cc <EXTI0_IRQHandler+0x108>)
 8001740:	2204      	movs	r2, #4
 8001742:	701a      	strb	r2, [r3, #0]
			ball_matrix_time = HAL_GetTick();
 8001744:	f000 faac 	bl	8001ca0 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	4b1c      	ldr	r3, [pc, #112]	; (80017bc <EXTI0_IRQHandler+0xf8>)
 800174c:	601a      	str	r2, [r3, #0]
			display_matrix_ball_flag = 1;
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <EXTI0_IRQHandler+0xec>)
 8001750:	2201      	movs	r2, #1
 8001752:	701a      	strb	r2, [r3, #0]
			tennis_ball_move_time = HAL_GetTick();
 8001754:	f000 faa4 	bl	8001ca0 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	4b1d      	ldr	r3, [pc, #116]	; (80017d0 <EXTI0_IRQHandler+0x10c>)
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	e01c      	b.n	800179a <EXTI0_IRQHandler+0xd6>
			//imu_setup_flag = 1;
		}
		else if (matrixStatus == MAZE) {
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <EXTI0_IRQHandler+0xe4>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b03      	cmp	r3, #3
 8001766:	d108      	bne.n	800177a <EXTI0_IRQHandler+0xb6>
			should_load_maze_flag = 1;
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <EXTI0_IRQHandler+0x110>)
 800176a:	2201      	movs	r2, #1
 800176c:	701a      	strb	r2, [r3, #0]
			reset_debug_leds();
 800176e:	f7ff f907 	bl	8000980 <reset_debug_leds>
			matrixStatus = CORNERS;
 8001772:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <EXTI0_IRQHandler+0xe4>)
 8001774:	2201      	movs	r2, #1
 8001776:	701a      	strb	r2, [r3, #0]
 8001778:	e00f      	b.n	800179a <EXTI0_IRQHandler+0xd6>
		}
		else if (matrixStatus == TENNIS) {
 800177a:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <EXTI0_IRQHandler+0xe4>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b04      	cmp	r3, #4
 8001780:	d10b      	bne.n	800179a <EXTI0_IRQHandler+0xd6>
			matrixStatus = CORNERS;
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <EXTI0_IRQHandler+0xe4>)
 8001784:	2201      	movs	r2, #1
 8001786:	701a      	strb	r2, [r3, #0]
			tennis_ball_velocity = 1;
 8001788:	4b13      	ldr	r3, [pc, #76]	; (80017d8 <EXTI0_IRQHandler+0x114>)
 800178a:	2201      	movs	r2, #1
 800178c:	701a      	strb	r2, [r3, #0]
			tennis_ball_hit_counter = 0;
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <EXTI0_IRQHandler+0x118>)
 8001790:	2200      	movs	r2, #0
 8001792:	701a      	strb	r2, [r3, #0]
			tennis_ball_direction = 0;
 8001794:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <EXTI0_IRQHandler+0x11c>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
		}

	}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800179a:	2001      	movs	r0, #1
 800179c:	f000 ff36 	bl	800260c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	2000033c 	.word	0x2000033c
 80017a8:	2000043d 	.word	0x2000043d
 80017ac:	20000034 	.word	0x20000034
 80017b0:	20000329 	.word	0x20000329
 80017b4:	2000032a 	.word	0x2000032a
 80017b8:	20000350 	.word	0x20000350
 80017bc:	20000348 	.word	0x20000348
 80017c0:	2000002e 	.word	0x2000002e
 80017c4:	2000002f 	.word	0x2000002f
 80017c8:	200002e4 	.word	0x200002e4
 80017cc:	20000030 	.word	0x20000030
 80017d0:	20000354 	.word	0x20000354
 80017d4:	20000032 	.word	0x20000032
 80017d8:	2000003a 	.word	0x2000003a
 80017dc:	2000032b 	.word	0x2000032b
 80017e0:	2000043c 	.word	0x2000043c

080017e4 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */
	// right
	if (HAL_GetTick() - button_right_time >= 100) {
 80017e8:	f000 fa5a 	bl	8001ca0 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	4b25      	ldr	r3, [pc, #148]	; (8001884 <EXTI1_IRQHandler+0xa0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	2b63      	cmp	r3, #99	; 0x63
 80017f6:	d940      	bls.n	800187a <EXTI1_IRQHandler+0x96>

		// Update time
		button_right_time = HAL_GetTick();
 80017f8:	f000 fa52 	bl	8001ca0 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	4b21      	ldr	r3, [pc, #132]	; (8001884 <EXTI1_IRQHandler+0xa0>)
 8001800:	601a      	str	r2, [r3, #0]

		// Move MAZE ball right
		if (matrixStatus == MAZE) {
 8001802:	4b21      	ldr	r3, [pc, #132]	; (8001888 <EXTI1_IRQHandler+0xa4>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b03      	cmp	r3, #3
 8001808:	d112      	bne.n	8001830 <EXTI1_IRQHandler+0x4c>
			if (checkMazeBallMove(1, 0)) {
 800180a:	2100      	movs	r1, #0
 800180c:	2001      	movs	r0, #1
 800180e:	f7ff faa9 	bl	8000d64 <checkMazeBallMove>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d030      	beq.n	800187a <EXTI1_IRQHandler+0x96>
				++ball_x_pos;
 8001818:	4b1c      	ldr	r3, [pc, #112]	; (800188c <EXTI1_IRQHandler+0xa8>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	3301      	adds	r3, #1
 800181e:	b2da      	uxtb	r2, r3
 8001820:	4b1a      	ldr	r3, [pc, #104]	; (800188c <EXTI1_IRQHandler+0xa8>)
 8001822:	701a      	strb	r2, [r3, #0]
				ball_maze_move_time = HAL_GetTick();
 8001824:	f000 fa3c 	bl	8001ca0 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	4b19      	ldr	r3, [pc, #100]	; (8001890 <EXTI1_IRQHandler+0xac>)
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	e024      	b.n	800187a <EXTI1_IRQHandler+0x96>
			}
		}
		// Move TENNIS bat right
		else if (matrixStatus == TENNIS) {
 8001830:	4b15      	ldr	r3, [pc, #84]	; (8001888 <EXTI1_IRQHandler+0xa4>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b04      	cmp	r3, #4
 8001836:	d112      	bne.n	800185e <EXTI1_IRQHandler+0x7a>
			if (checkBatMove(1, 0)) {
 8001838:	2100      	movs	r1, #0
 800183a:	2001      	movs	r0, #1
 800183c:	f7ff fb3e 	bl	8000ebc <checkBatMove>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d019      	beq.n	800187a <EXTI1_IRQHandler+0x96>
				++bat_x_pos;
 8001846:	4b13      	ldr	r3, [pc, #76]	; (8001894 <EXTI1_IRQHandler+0xb0>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	3301      	adds	r3, #1
 800184c:	b2da      	uxtb	r2, r3
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <EXTI1_IRQHandler+0xb0>)
 8001850:	701a      	strb	r2, [r3, #0]
				bat_move_time = HAL_GetTick();
 8001852:	f000 fa25 	bl	8001ca0 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <EXTI1_IRQHandler+0xb4>)
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	e00d      	b.n	800187a <EXTI1_IRQHandler+0x96>
			}
		}
		else if (ball_x_pos < MAX_X && matrixStatus == BALL) {
 800185e:	4b0b      	ldr	r3, [pc, #44]	; (800188c <EXTI1_IRQHandler+0xa8>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b06      	cmp	r3, #6
 8001864:	d809      	bhi.n	800187a <EXTI1_IRQHandler+0x96>
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <EXTI1_IRQHandler+0xa4>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b05      	cmp	r3, #5
 800186c:	d105      	bne.n	800187a <EXTI1_IRQHandler+0x96>
			++ball_x_pos;
 800186e:	4b07      	ldr	r3, [pc, #28]	; (800188c <EXTI1_IRQHandler+0xa8>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	3301      	adds	r3, #1
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4b05      	ldr	r3, [pc, #20]	; (800188c <EXTI1_IRQHandler+0xa8>)
 8001878:	701a      	strb	r2, [r3, #0]
		}
	}

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800187a:	2002      	movs	r0, #2
 800187c:	f000 fec6 	bl	800260c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001880:	bf00      	nop
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000338 	.word	0x20000338
 8001888:	2000043d 	.word	0x2000043d
 800188c:	2000002e 	.word	0x2000002e
 8001890:	2000034c 	.word	0x2000034c
 8001894:	200002e4 	.word	0x200002e4
 8001898:	20000358 	.word	0x20000358

0800189c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	// up
	if (HAL_GetTick() - button_up_time >= 100) {
 80018a0:	f000 f9fe 	bl	8001ca0 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	4b29      	ldr	r3, [pc, #164]	; (800194c <EXTI2_IRQHandler+0xb0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b63      	cmp	r3, #99	; 0x63
 80018ae:	d948      	bls.n	8001942 <EXTI2_IRQHandler+0xa6>
		// Update time
		button_up_time = HAL_GetTick();
 80018b0:	f000 f9f6 	bl	8001ca0 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	4b25      	ldr	r3, [pc, #148]	; (800194c <EXTI2_IRQHandler+0xb0>)
 80018b8:	601a      	str	r2, [r3, #0]
		if (matrixStatus == MAZE_SELECTION) {
 80018ba:	4b25      	ldr	r3, [pc, #148]	; (8001950 <EXTI2_IRQHandler+0xb4>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d110      	bne.n	80018e4 <EXTI2_IRQHandler+0x48>
			if (selected_maze_num < 4) {
 80018c2:	4b24      	ldr	r3, [pc, #144]	; (8001954 <EXTI2_IRQHandler+0xb8>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b03      	cmp	r3, #3
 80018c8:	dc05      	bgt.n	80018d6 <EXTI2_IRQHandler+0x3a>
				++selected_maze_num;
 80018ca:	4b22      	ldr	r3, [pc, #136]	; (8001954 <EXTI2_IRQHandler+0xb8>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	4a20      	ldr	r2, [pc, #128]	; (8001954 <EXTI2_IRQHandler+0xb8>)
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	e002      	b.n	80018dc <EXTI2_IRQHandler+0x40>
			}
			else {
				selected_maze_num = 1;
 80018d6:	4b1f      	ldr	r3, [pc, #124]	; (8001954 <EXTI2_IRQHandler+0xb8>)
 80018d8:	2201      	movs	r2, #1
 80018da:	601a      	str	r2, [r3, #0]
			}
			should_load_num_flag = 1;
 80018dc:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <EXTI2_IRQHandler+0xbc>)
 80018de:	2201      	movs	r2, #1
 80018e0:	701a      	strb	r2, [r3, #0]
 80018e2:	e02e      	b.n	8001942 <EXTI2_IRQHandler+0xa6>
		}
		// Move MAZE ball up
		else if (matrixStatus == MAZE) {
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <EXTI2_IRQHandler+0xb4>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	d113      	bne.n	8001914 <EXTI2_IRQHandler+0x78>
			if (checkMazeBallMove(0, -1)) {
 80018ec:	f04f 31ff 	mov.w	r1, #4294967295
 80018f0:	2000      	movs	r0, #0
 80018f2:	f7ff fa37 	bl	8000d64 <checkMazeBallMove>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d022      	beq.n	8001942 <EXTI2_IRQHandler+0xa6>
				--ball_y_pos;
 80018fc:	4b17      	ldr	r3, [pc, #92]	; (800195c <EXTI2_IRQHandler+0xc0>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	3b01      	subs	r3, #1
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b15      	ldr	r3, [pc, #84]	; (800195c <EXTI2_IRQHandler+0xc0>)
 8001906:	701a      	strb	r2, [r3, #0]
				ball_maze_move_time = HAL_GetTick();
 8001908:	f000 f9ca 	bl	8001ca0 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <EXTI2_IRQHandler+0xc4>)
 8001910:	601a      	str	r2, [r3, #0]
 8001912:	e016      	b.n	8001942 <EXTI2_IRQHandler+0xa6>
			}
		}
		// Move TENNIS bat up
		else if (matrixStatus == TENNIS) {
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <EXTI2_IRQHandler+0xb4>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b04      	cmp	r3, #4
 800191a:	d112      	bne.n	8001942 <EXTI2_IRQHandler+0xa6>
			if (checkBatMove(0, -1)) {
 800191c:	f04f 31ff 	mov.w	r1, #4294967295
 8001920:	2000      	movs	r0, #0
 8001922:	f7ff facb 	bl	8000ebc <checkBatMove>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00a      	beq.n	8001942 <EXTI2_IRQHandler+0xa6>
				--bat_y_pos;
 800192c:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <EXTI2_IRQHandler+0xc8>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	3b01      	subs	r3, #1
 8001932:	b2da      	uxtb	r2, r3
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <EXTI2_IRQHandler+0xc8>)
 8001936:	701a      	strb	r2, [r3, #0]
				bat_move_time = HAL_GetTick();
 8001938:	f000 f9b2 	bl	8001ca0 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	4b0a      	ldr	r3, [pc, #40]	; (8001968 <EXTI2_IRQHandler+0xcc>)
 8001940:	601a      	str	r2, [r3, #0]
			}
		}
	}

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001942:	2004      	movs	r0, #4
 8001944:	f000 fe62 	bl	800260c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	20000340 	.word	0x20000340
 8001950:	2000043d 	.word	0x2000043d
 8001954:	20000034 	.word	0x20000034
 8001958:	20000031 	.word	0x20000031
 800195c:	2000002f 	.word	0x2000002f
 8001960:	2000034c 	.word	0x2000034c
 8001964:	20000030 	.word	0x20000030
 8001968:	20000358 	.word	0x20000358

0800196c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	// down
	if (HAL_GetTick() - button_down_time >= 100) {
 8001970:	f000 f996 	bl	8001ca0 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	4b28      	ldr	r3, [pc, #160]	; (8001a18 <EXTI3_IRQHandler+0xac>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b63      	cmp	r3, #99	; 0x63
 800197e:	d946      	bls.n	8001a0e <EXTI3_IRQHandler+0xa2>
		// Update time
		button_down_time = HAL_GetTick();
 8001980:	f000 f98e 	bl	8001ca0 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	4b24      	ldr	r3, [pc, #144]	; (8001a18 <EXTI3_IRQHandler+0xac>)
 8001988:	601a      	str	r2, [r3, #0]
		if (matrixStatus == MAZE_SELECTION) {
 800198a:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <EXTI3_IRQHandler+0xb0>)
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d110      	bne.n	80019b4 <EXTI3_IRQHandler+0x48>
			if (selected_maze_num > 1) {
 8001992:	4b23      	ldr	r3, [pc, #140]	; (8001a20 <EXTI3_IRQHandler+0xb4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b01      	cmp	r3, #1
 8001998:	dd05      	ble.n	80019a6 <EXTI3_IRQHandler+0x3a>
				--selected_maze_num;
 800199a:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <EXTI3_IRQHandler+0xb4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	3b01      	subs	r3, #1
 80019a0:	4a1f      	ldr	r2, [pc, #124]	; (8001a20 <EXTI3_IRQHandler+0xb4>)
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	e002      	b.n	80019ac <EXTI3_IRQHandler+0x40>
			}
			else {
				selected_maze_num = 4;
 80019a6:	4b1e      	ldr	r3, [pc, #120]	; (8001a20 <EXTI3_IRQHandler+0xb4>)
 80019a8:	2204      	movs	r2, #4
 80019aa:	601a      	str	r2, [r3, #0]
			}
			should_load_num_flag = 1;
 80019ac:	4b1d      	ldr	r3, [pc, #116]	; (8001a24 <EXTI3_IRQHandler+0xb8>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
 80019b2:	e02c      	b.n	8001a0e <EXTI3_IRQHandler+0xa2>
		}
		// Move MAZE ball down
		else if (matrixStatus == MAZE) {
 80019b4:	4b19      	ldr	r3, [pc, #100]	; (8001a1c <EXTI3_IRQHandler+0xb0>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	2b03      	cmp	r3, #3
 80019ba:	d112      	bne.n	80019e2 <EXTI3_IRQHandler+0x76>
			if (checkMazeBallMove(0, 1)) {
 80019bc:	2101      	movs	r1, #1
 80019be:	2000      	movs	r0, #0
 80019c0:	f7ff f9d0 	bl	8000d64 <checkMazeBallMove>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d021      	beq.n	8001a0e <EXTI3_IRQHandler+0xa2>
				++ball_y_pos;
 80019ca:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <EXTI3_IRQHandler+0xbc>)
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	3301      	adds	r3, #1
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <EXTI3_IRQHandler+0xbc>)
 80019d4:	701a      	strb	r2, [r3, #0]
				ball_maze_move_time = HAL_GetTick();
 80019d6:	f000 f963 	bl	8001ca0 <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <EXTI3_IRQHandler+0xc0>)
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	e015      	b.n	8001a0e <EXTI3_IRQHandler+0xa2>
			}
		}
		// Move TENNIS bat down
		else if (matrixStatus == TENNIS) {
 80019e2:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <EXTI3_IRQHandler+0xb0>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d111      	bne.n	8001a0e <EXTI3_IRQHandler+0xa2>
			if (checkBatMove(0, 1)) {
 80019ea:	2101      	movs	r1, #1
 80019ec:	2000      	movs	r0, #0
 80019ee:	f7ff fa65 	bl	8000ebc <checkBatMove>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00a      	beq.n	8001a0e <EXTI3_IRQHandler+0xa2>
				++bat_y_pos;
 80019f8:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <EXTI3_IRQHandler+0xc4>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	3301      	adds	r3, #1
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <EXTI3_IRQHandler+0xc4>)
 8001a02:	701a      	strb	r2, [r3, #0]
				bat_move_time = HAL_GetTick();
 8001a04:	f000 f94c 	bl	8001ca0 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	4b0a      	ldr	r3, [pc, #40]	; (8001a34 <EXTI3_IRQHandler+0xc8>)
 8001a0c:	601a      	str	r2, [r3, #0]
			}
		}
	}

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001a0e:	2008      	movs	r0, #8
 8001a10:	f000 fdfc 	bl	800260c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001a14:	bf00      	nop
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	20000344 	.word	0x20000344
 8001a1c:	2000043d 	.word	0x2000043d
 8001a20:	20000034 	.word	0x20000034
 8001a24:	20000031 	.word	0x20000031
 8001a28:	2000002f 	.word	0x2000002f
 8001a2c:	2000034c 	.word	0x2000034c
 8001a30:	20000030 	.word	0x20000030
 8001a34:	20000358 	.word	0x20000358

08001a38 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	// left
	if (HAL_GetTick() - button_left_time >= 100) {
 8001a3c:	f000 f930 	bl	8001ca0 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	4b32      	ldr	r3, [pc, #200]	; (8001b0c <EXTI4_IRQHandler+0xd4>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b63      	cmp	r3, #99	; 0x63
 8001a4a:	d95a      	bls.n	8001b02 <EXTI4_IRQHandler+0xca>
		// Update time
		button_left_time = HAL_GetTick();
 8001a4c:	f000 f928 	bl	8001ca0 <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	4b2e      	ldr	r3, [pc, #184]	; (8001b0c <EXTI4_IRQHandler+0xd4>)
 8001a54:	601a      	str	r2, [r3, #0]

		// If in CORNERS mode, change to MAZE_SELECT mode
		if (matrixStatus == CORNERS) {
 8001a56:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <EXTI4_IRQHandler+0xd8>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d109      	bne.n	8001a72 <EXTI4_IRQHandler+0x3a>
			matrixStatus = MAZE_SELECTION;
 8001a5e:	4b2c      	ldr	r3, [pc, #176]	; (8001b10 <EXTI4_IRQHandler+0xd8>)
 8001a60:	2202      	movs	r2, #2
 8001a62:	701a      	strb	r2, [r3, #0]
			selected_maze_num = 1;
 8001a64:	4b2b      	ldr	r3, [pc, #172]	; (8001b14 <EXTI4_IRQHandler+0xdc>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]
			should_load_num_flag = 1;
 8001a6a:	4b2b      	ldr	r3, [pc, #172]	; (8001b18 <EXTI4_IRQHandler+0xe0>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	701a      	strb	r2, [r3, #0]
 8001a70:	e047      	b.n	8001b02 <EXTI4_IRQHandler+0xca>
		}

		// If in MAZE_SELECT, change to CORNERS
		else if (matrixStatus == MAZE_SELECTION) {
 8001a72:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <EXTI4_IRQHandler+0xd8>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d105      	bne.n	8001a86 <EXTI4_IRQHandler+0x4e>
			matrixStatus = CORNERS;
 8001a7a:	4b25      	ldr	r3, [pc, #148]	; (8001b10 <EXTI4_IRQHandler+0xd8>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
			reset_debug_leds();
 8001a80:	f7fe ff7e 	bl	8000980 <reset_debug_leds>
 8001a84:	e03d      	b.n	8001b02 <EXTI4_IRQHandler+0xca>
		}

		// Move MAZE ball left
		else if (matrixStatus == MAZE) {
 8001a86:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <EXTI4_IRQHandler+0xd8>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	d113      	bne.n	8001ab6 <EXTI4_IRQHandler+0x7e>
			if (checkMazeBallMove(-1, 0)) {
 8001a8e:	2100      	movs	r1, #0
 8001a90:	f04f 30ff 	mov.w	r0, #4294967295
 8001a94:	f7ff f966 	bl	8000d64 <checkMazeBallMove>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d031      	beq.n	8001b02 <EXTI4_IRQHandler+0xca>
				--ball_x_pos;
 8001a9e:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <EXTI4_IRQHandler+0xe4>)
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b2da      	uxtb	r2, r3
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <EXTI4_IRQHandler+0xe4>)
 8001aa8:	701a      	strb	r2, [r3, #0]
				ball_maze_move_time = HAL_GetTick();
 8001aaa:	f000 f8f9 	bl	8001ca0 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <EXTI4_IRQHandler+0xe8>)
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	e025      	b.n	8001b02 <EXTI4_IRQHandler+0xca>
			}
		}

		// Move TENNIS bat left
		else if (matrixStatus == TENNIS) {
 8001ab6:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <EXTI4_IRQHandler+0xd8>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	d113      	bne.n	8001ae6 <EXTI4_IRQHandler+0xae>
			if (checkBatMove(-1, 0)) {
 8001abe:	2100      	movs	r1, #0
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac4:	f7ff f9fa 	bl	8000ebc <checkBatMove>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d019      	beq.n	8001b02 <EXTI4_IRQHandler+0xca>
				--bat_x_pos;
 8001ace:	4b15      	ldr	r3, [pc, #84]	; (8001b24 <EXTI4_IRQHandler+0xec>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <EXTI4_IRQHandler+0xec>)
 8001ad8:	701a      	strb	r2, [r3, #0]
				bat_move_time = HAL_GetTick();
 8001ada:	f000 f8e1 	bl	8001ca0 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <EXTI4_IRQHandler+0xf0>)
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	e00d      	b.n	8001b02 <EXTI4_IRQHandler+0xca>
			}
		}

		// Move ball left
		else if (ball_x_pos > MIN_X && matrixStatus == BALL) {
 8001ae6:	4b0d      	ldr	r3, [pc, #52]	; (8001b1c <EXTI4_IRQHandler+0xe4>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d009      	beq.n	8001b02 <EXTI4_IRQHandler+0xca>
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <EXTI4_IRQHandler+0xd8>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b05      	cmp	r3, #5
 8001af4:	d105      	bne.n	8001b02 <EXTI4_IRQHandler+0xca>
			--ball_x_pos;
 8001af6:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <EXTI4_IRQHandler+0xe4>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <EXTI4_IRQHandler+0xe4>)
 8001b00:	701a      	strb	r2, [r3, #0]
	}
	}
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001b02:	2010      	movs	r0, #16
 8001b04:	f000 fd82 	bl	800260c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000334 	.word	0x20000334
 8001b10:	2000043d 	.word	0x2000043d
 8001b14:	20000034 	.word	0x20000034
 8001b18:	20000031 	.word	0x20000031
 8001b1c:	2000002e 	.word	0x2000002e
 8001b20:	2000034c 	.word	0x2000034c
 8001b24:	200002e4 	.word	0x200002e4
 8001b28:	20000358 	.word	0x20000358

08001b2c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b30:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b34:	f000 fd6a 	bl	800260c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001b40:	4b15      	ldr	r3, [pc, #84]	; (8001b98 <SystemInit+0x5c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a14      	ldr	r2, [pc, #80]	; (8001b98 <SystemInit+0x5c>)
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <SystemInit+0x5c>)
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	4911      	ldr	r1, [pc, #68]	; (8001b98 <SystemInit+0x5c>)
 8001b52:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <SystemInit+0x60>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001b58:	4b0f      	ldr	r3, [pc, #60]	; (8001b98 <SystemInit+0x5c>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0e      	ldr	r2, [pc, #56]	; (8001b98 <SystemInit+0x5c>)
 8001b5e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b66:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <SystemInit+0x5c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <SystemInit+0x5c>)
 8001b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b72:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001b74:	4b08      	ldr	r3, [pc, #32]	; (8001b98 <SystemInit+0x5c>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	4a07      	ldr	r2, [pc, #28]	; (8001b98 <SystemInit+0x5c>)
 8001b7a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001b7e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <SystemInit+0x5c>)
 8001b82:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001b86:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <SystemInit+0x64>)
 8001b8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b8e:	609a      	str	r2, [r3, #8]
#endif 
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bc80      	pop	{r7}
 8001b96:	4770      	bx	lr
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	f8ff0000 	.word	0xf8ff0000
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001ba4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001ba6:	e003      	b.n	8001bb0 <LoopCopyDataInit>

08001ba8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001ba8:	4b0b      	ldr	r3, [pc, #44]	; (8001bd8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001baa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001bac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001bae:	3104      	adds	r1, #4

08001bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001bb0:	480a      	ldr	r0, [pc, #40]	; (8001bdc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001bb4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001bb6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001bb8:	d3f6      	bcc.n	8001ba8 <CopyDataInit>
  ldr r2, =_sbss
 8001bba:	4a0a      	ldr	r2, [pc, #40]	; (8001be4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001bbc:	e002      	b.n	8001bc4 <LoopFillZerobss>

08001bbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001bbe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001bc0:	f842 3b04 	str.w	r3, [r2], #4

08001bc4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001bc6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001bc8:	d3f9      	bcc.n	8001bbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bca:	f7ff ffb7 	bl	8001b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bce:	f002 fb87 	bl	80042e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bd2:	f7fe fbe3 	bl	800039c <main>
  bx lr
 8001bd6:	4770      	bx	lr
  ldr r3, =_sidata
 8001bd8:	08004384 	.word	0x08004384
  ldr r0, =_sdata
 8001bdc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001be0:	200002c0 	.word	0x200002c0
  ldr r2, =_sbss
 8001be4:	200002c0 	.word	0x200002c0
  ldr r3, = _ebss
 8001be8:	20000444 	.word	0x20000444

08001bec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bec:	e7fe      	b.n	8001bec <ADC1_2_IRQHandler>
	...

08001bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <HAL_Init+0x28>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a07      	ldr	r2, [pc, #28]	; (8001c18 <HAL_Init+0x28>)
 8001bfa:	f043 0310 	orr.w	r3, r3, #16
 8001bfe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c00:	2003      	movs	r0, #3
 8001c02:	f000 fb4f 	bl	80022a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c06:	2000      	movs	r0, #0
 8001c08:	f000 f808 	bl	8001c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c0c:	f7ff fbb8 	bl	8001380 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40022000 	.word	0x40022000

08001c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_InitTick+0x54>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_InitTick+0x58>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c32:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f000 fb67 	bl	800230e <HAL_SYSTICK_Config>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e00e      	b.n	8001c68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2b0f      	cmp	r3, #15
 8001c4e:	d80a      	bhi.n	8001c66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c50:	2200      	movs	r2, #0
 8001c52:	6879      	ldr	r1, [r7, #4]
 8001c54:	f04f 30ff 	mov.w	r0, #4294967295
 8001c58:	f000 fb2f 	bl	80022ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c5c:	4a06      	ldr	r2, [pc, #24]	; (8001c78 <HAL_InitTick+0x5c>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
 8001c64:	e000      	b.n	8001c68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	200002b4 	.word	0x200002b4
 8001c74:	200002bc 	.word	0x200002bc
 8001c78:	200002b8 	.word	0x200002b8

08001c7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c80:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_IncTick+0x1c>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	461a      	mov	r2, r3
 8001c86:	4b05      	ldr	r3, [pc, #20]	; (8001c9c <HAL_IncTick+0x20>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	4a03      	ldr	r2, [pc, #12]	; (8001c9c <HAL_IncTick+0x20>)
 8001c8e:	6013      	str	r3, [r2, #0]
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	200002bc 	.word	0x200002bc
 8001c9c:	20000440 	.word	0x20000440

08001ca0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca4:	4b02      	ldr	r3, [pc, #8]	; (8001cb0 <HAL_GetTick+0x10>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bc80      	pop	{r7}
 8001cae:	4770      	bx	lr
 8001cb0:	20000440 	.word	0x20000440

08001cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cbc:	f7ff fff0 	bl	8001ca0 <HAL_GetTick>
 8001cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ccc:	d005      	beq.n	8001cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cce:	4b09      	ldr	r3, [pc, #36]	; (8001cf4 <HAL_Delay+0x40>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cda:	bf00      	nop
 8001cdc:	f7ff ffe0 	bl	8001ca0 <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d8f7      	bhi.n	8001cdc <HAL_Delay+0x28>
  {
  }
}
 8001cec:	bf00      	nop
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	200002bc 	.word	0x200002bc

08001cf8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d101      	bne.n	8001d1a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e0be      	b.n	8001e98 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d109      	bne.n	8001d3c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff fb54 	bl	80013e4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f000 f9ab 	bl	8002098 <ADC_ConversionStop_Disable>
 8001d42:	4603      	mov	r3, r0
 8001d44:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4a:	f003 0310 	and.w	r3, r3, #16
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f040 8099 	bne.w	8001e86 <HAL_ADC_Init+0x18e>
 8001d54:	7dfb      	ldrb	r3, [r7, #23]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	f040 8095 	bne.w	8001e86 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d60:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d64:	f023 0302 	bic.w	r3, r3, #2
 8001d68:	f043 0202 	orr.w	r2, r3, #2
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d78:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	7b1b      	ldrb	r3, [r3, #12]
 8001d7e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001d80:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d90:	d003      	beq.n	8001d9a <HAL_ADC_Init+0xa2>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d102      	bne.n	8001da0 <HAL_ADC_Init+0xa8>
 8001d9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d9e:	e000      	b.n	8001da2 <HAL_ADC_Init+0xaa>
 8001da0:	2300      	movs	r3, #0
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7d1b      	ldrb	r3, [r3, #20]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d119      	bne.n	8001de4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	7b1b      	ldrb	r3, [r3, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d109      	bne.n	8001dcc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	035a      	lsls	r2, r3, #13
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	e00b      	b.n	8001de4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd0:	f043 0220 	orr.w	r2, r3, #32
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ddc:	f043 0201 	orr.w	r2, r3, #1
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	430a      	orrs	r2, r1
 8001df6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	689a      	ldr	r2, [r3, #8]
 8001dfe:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <HAL_ADC_Init+0x1a8>)
 8001e00:	4013      	ands	r3, r2
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	68b9      	ldr	r1, [r7, #8]
 8001e08:	430b      	orrs	r3, r1
 8001e0a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e14:	d003      	beq.n	8001e1e <HAL_ADC_Init+0x126>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d104      	bne.n	8001e28 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	051b      	lsls	r3, r3, #20
 8001e26:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e2e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68fa      	ldr	r2, [r7, #12]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <HAL_ADC_Init+0x1ac>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d10b      	bne.n	8001e64 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e56:	f023 0303 	bic.w	r3, r3, #3
 8001e5a:	f043 0201 	orr.w	r2, r3, #1
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e62:	e018      	b.n	8001e96 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	f023 0312 	bic.w	r3, r3, #18
 8001e6c:	f043 0210 	orr.w	r2, r3, #16
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	f043 0201 	orr.w	r2, r3, #1
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001e84:	e007      	b.n	8001e96 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8a:	f043 0210 	orr.w	r2, r3, #16
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	ffe1f7fd 	.word	0xffe1f7fd
 8001ea4:	ff1f0efe 	.word	0xff1f0efe

08001ea8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d101      	bne.n	8001ec8 <HAL_ADC_ConfigChannel+0x20>
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	e0dc      	b.n	8002082 <HAL_ADC_ConfigChannel+0x1da>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b06      	cmp	r3, #6
 8001ed6:	d81c      	bhi.n	8001f12 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	3b05      	subs	r3, #5
 8001eea:	221f      	movs	r2, #31
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	4019      	ands	r1, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	6818      	ldr	r0, [r3, #0]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	3b05      	subs	r3, #5
 8001f04:	fa00 f203 	lsl.w	r2, r0, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	635a      	str	r2, [r3, #52]	; 0x34
 8001f10:	e03c      	b.n	8001f8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b0c      	cmp	r3, #12
 8001f18:	d81c      	bhi.n	8001f54 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	3b23      	subs	r3, #35	; 0x23
 8001f2c:	221f      	movs	r2, #31
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	4019      	ands	r1, r3
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685a      	ldr	r2, [r3, #4]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	4413      	add	r3, r2
 8001f44:	3b23      	subs	r3, #35	; 0x23
 8001f46:	fa00 f203 	lsl.w	r2, r0, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	631a      	str	r2, [r3, #48]	; 0x30
 8001f52:	e01b      	b.n	8001f8c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685a      	ldr	r2, [r3, #4]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	3b41      	subs	r3, #65	; 0x41
 8001f66:	221f      	movs	r2, #31
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	4019      	ands	r1, r3
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3b41      	subs	r3, #65	; 0x41
 8001f80:	fa00 f203 	lsl.w	r2, r0, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b09      	cmp	r3, #9
 8001f92:	d91c      	bls.n	8001fce <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68d9      	ldr	r1, [r3, #12]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3b1e      	subs	r3, #30
 8001fa6:	2207      	movs	r2, #7
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	43db      	mvns	r3, r3
 8001fae:	4019      	ands	r1, r3
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	6898      	ldr	r0, [r3, #8]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3b1e      	subs	r3, #30
 8001fc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	60da      	str	r2, [r3, #12]
 8001fcc:	e019      	b.n	8002002 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6919      	ldr	r1, [r3, #16]
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	005b      	lsls	r3, r3, #1
 8001fdc:	4413      	add	r3, r2
 8001fde:	2207      	movs	r2, #7
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	4019      	ands	r1, r3
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	6898      	ldr	r0, [r3, #8]
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	005b      	lsls	r3, r3, #1
 8001ff4:	4413      	add	r3, r2
 8001ff6:	fa00 f203 	lsl.w	r2, r0, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b10      	cmp	r3, #16
 8002008:	d003      	beq.n	8002012 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800200e:	2b11      	cmp	r3, #17
 8002010:	d132      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a1d      	ldr	r2, [pc, #116]	; (800208c <HAL_ADC_ConfigChannel+0x1e4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d125      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d126      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002038:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b10      	cmp	r3, #16
 8002040:	d11a      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002042:	4b13      	ldr	r3, [pc, #76]	; (8002090 <HAL_ADC_ConfigChannel+0x1e8>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a13      	ldr	r2, [pc, #76]	; (8002094 <HAL_ADC_ConfigChannel+0x1ec>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	0c9a      	lsrs	r2, r3, #18
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002058:	e002      	b.n	8002060 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3b01      	subs	r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f9      	bne.n	800205a <HAL_ADC_ConfigChannel+0x1b2>
 8002066:	e007      	b.n	8002078 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	f043 0220 	orr.w	r2, r3, #32
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002080:	7bfb      	ldrb	r3, [r7, #15]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	40012400 	.word	0x40012400
 8002090:	200002b4 	.word	0x200002b4
 8002094:	431bde83 	.word	0x431bde83

08002098 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d127      	bne.n	8002102 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0201 	bic.w	r2, r2, #1
 80020c0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020c2:	f7ff fded 	bl	8001ca0 <HAL_GetTick>
 80020c6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020c8:	e014      	b.n	80020f4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80020ca:	f7ff fde9 	bl	8001ca0 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d90d      	bls.n	80020f4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020dc:	f043 0210 	orr.w	r2, r3, #16
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	f043 0201 	orr.w	r2, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e007      	b.n	8002104 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d0e3      	beq.n	80020ca <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <__NVIC_SetPriorityGrouping+0x44>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002128:	4013      	ands	r3, r2
 800212a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002134:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002138:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800213c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800213e:	4a04      	ldr	r2, [pc, #16]	; (8002150 <__NVIC_SetPriorityGrouping+0x44>)
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	60d3      	str	r3, [r2, #12]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	e000ed00 	.word	0xe000ed00

08002154 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002158:	4b04      	ldr	r3, [pc, #16]	; (800216c <__NVIC_GetPriorityGrouping+0x18>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	0a1b      	lsrs	r3, r3, #8
 800215e:	f003 0307 	and.w	r3, r3, #7
}
 8002162:	4618      	mov	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4603      	mov	r3, r0
 8002178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	2b00      	cmp	r3, #0
 8002180:	db0b      	blt.n	800219a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	f003 021f 	and.w	r2, r3, #31
 8002188:	4906      	ldr	r1, [pc, #24]	; (80021a4 <__NVIC_EnableIRQ+0x34>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	2001      	movs	r0, #1
 8002192:	fa00 f202 	lsl.w	r2, r0, r2
 8002196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr
 80021a4:	e000e100 	.word	0xe000e100

080021a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	6039      	str	r1, [r7, #0]
 80021b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	db0a      	blt.n	80021d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	490c      	ldr	r1, [pc, #48]	; (80021f4 <__NVIC_SetPriority+0x4c>)
 80021c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c6:	0112      	lsls	r2, r2, #4
 80021c8:	b2d2      	uxtb	r2, r2
 80021ca:	440b      	add	r3, r1
 80021cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d0:	e00a      	b.n	80021e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	4908      	ldr	r1, [pc, #32]	; (80021f8 <__NVIC_SetPriority+0x50>)
 80021d8:	79fb      	ldrb	r3, [r7, #7]
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	3b04      	subs	r3, #4
 80021e0:	0112      	lsls	r2, r2, #4
 80021e2:	b2d2      	uxtb	r2, r2
 80021e4:	440b      	add	r3, r1
 80021e6:	761a      	strb	r2, [r3, #24]
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bc80      	pop	{r7}
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	e000e100 	.word	0xe000e100
 80021f8:	e000ed00 	.word	0xe000ed00

080021fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b089      	sub	sp, #36	; 0x24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f1c3 0307 	rsb	r3, r3, #7
 8002216:	2b04      	cmp	r3, #4
 8002218:	bf28      	it	cs
 800221a:	2304      	movcs	r3, #4
 800221c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	3304      	adds	r3, #4
 8002222:	2b06      	cmp	r3, #6
 8002224:	d902      	bls.n	800222c <NVIC_EncodePriority+0x30>
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	3b03      	subs	r3, #3
 800222a:	e000      	b.n	800222e <NVIC_EncodePriority+0x32>
 800222c:	2300      	movs	r3, #0
 800222e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002230:	f04f 32ff 	mov.w	r2, #4294967295
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43da      	mvns	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	401a      	ands	r2, r3
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002244:	f04f 31ff 	mov.w	r1, #4294967295
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	fa01 f303 	lsl.w	r3, r1, r3
 800224e:	43d9      	mvns	r1, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002254:	4313      	orrs	r3, r2
         );
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	; 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	bc80      	pop	{r7}
 800225e:	4770      	bx	lr

08002260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3b01      	subs	r3, #1
 800226c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002270:	d301      	bcc.n	8002276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002272:	2301      	movs	r3, #1
 8002274:	e00f      	b.n	8002296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002276:	4a0a      	ldr	r2, [pc, #40]	; (80022a0 <SysTick_Config+0x40>)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800227e:	210f      	movs	r1, #15
 8002280:	f04f 30ff 	mov.w	r0, #4294967295
 8002284:	f7ff ff90 	bl	80021a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <SysTick_Config+0x40>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800228e:	4b04      	ldr	r3, [pc, #16]	; (80022a0 <SysTick_Config+0x40>)
 8002290:	2207      	movs	r2, #7
 8002292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	e000e010 	.word	0xe000e010

080022a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f7ff ff2d 	bl	800210c <__NVIC_SetPriorityGrouping>
}
 80022b2:	bf00      	nop
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b086      	sub	sp, #24
 80022be:	af00      	add	r7, sp, #0
 80022c0:	4603      	mov	r3, r0
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
 80022c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022cc:	f7ff ff42 	bl	8002154 <__NVIC_GetPriorityGrouping>
 80022d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	68b9      	ldr	r1, [r7, #8]
 80022d6:	6978      	ldr	r0, [r7, #20]
 80022d8:	f7ff ff90 	bl	80021fc <NVIC_EncodePriority>
 80022dc:	4602      	mov	r2, r0
 80022de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022e2:	4611      	mov	r1, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7ff ff5f 	bl	80021a8 <__NVIC_SetPriority>
}
 80022ea:	bf00      	nop
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	4603      	mov	r3, r0
 80022fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002300:	4618      	mov	r0, r3
 8002302:	f7ff ff35 	bl	8002170 <__NVIC_EnableIRQ>
}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b082      	sub	sp, #8
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f7ff ffa2 	bl	8002260 <SysTick_Config>
 800231c:	4603      	mov	r3, r0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002328:	b480      	push	{r7}
 800232a:	b08b      	sub	sp, #44	; 0x2c
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002332:	2300      	movs	r3, #0
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002336:	2300      	movs	r3, #0
 8002338:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233a:	e127      	b.n	800258c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800233c:	2201      	movs	r2, #1
 800233e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	69fa      	ldr	r2, [r7, #28]
 800234c:	4013      	ands	r3, r2
 800234e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	429a      	cmp	r2, r3
 8002356:	f040 8116 	bne.w	8002586 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b12      	cmp	r3, #18
 8002360:	d034      	beq.n	80023cc <HAL_GPIO_Init+0xa4>
 8002362:	2b12      	cmp	r3, #18
 8002364:	d80d      	bhi.n	8002382 <HAL_GPIO_Init+0x5a>
 8002366:	2b02      	cmp	r3, #2
 8002368:	d02b      	beq.n	80023c2 <HAL_GPIO_Init+0x9a>
 800236a:	2b02      	cmp	r3, #2
 800236c:	d804      	bhi.n	8002378 <HAL_GPIO_Init+0x50>
 800236e:	2b00      	cmp	r3, #0
 8002370:	d031      	beq.n	80023d6 <HAL_GPIO_Init+0xae>
 8002372:	2b01      	cmp	r3, #1
 8002374:	d01c      	beq.n	80023b0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002376:	e048      	b.n	800240a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002378:	2b03      	cmp	r3, #3
 800237a:	d043      	beq.n	8002404 <HAL_GPIO_Init+0xdc>
 800237c:	2b11      	cmp	r3, #17
 800237e:	d01b      	beq.n	80023b8 <HAL_GPIO_Init+0x90>
          break;
 8002380:	e043      	b.n	800240a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002382:	4a89      	ldr	r2, [pc, #548]	; (80025a8 <HAL_GPIO_Init+0x280>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d026      	beq.n	80023d6 <HAL_GPIO_Init+0xae>
 8002388:	4a87      	ldr	r2, [pc, #540]	; (80025a8 <HAL_GPIO_Init+0x280>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d806      	bhi.n	800239c <HAL_GPIO_Init+0x74>
 800238e:	4a87      	ldr	r2, [pc, #540]	; (80025ac <HAL_GPIO_Init+0x284>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d020      	beq.n	80023d6 <HAL_GPIO_Init+0xae>
 8002394:	4a86      	ldr	r2, [pc, #536]	; (80025b0 <HAL_GPIO_Init+0x288>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d01d      	beq.n	80023d6 <HAL_GPIO_Init+0xae>
          break;
 800239a:	e036      	b.n	800240a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800239c:	4a85      	ldr	r2, [pc, #532]	; (80025b4 <HAL_GPIO_Init+0x28c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d019      	beq.n	80023d6 <HAL_GPIO_Init+0xae>
 80023a2:	4a85      	ldr	r2, [pc, #532]	; (80025b8 <HAL_GPIO_Init+0x290>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d016      	beq.n	80023d6 <HAL_GPIO_Init+0xae>
 80023a8:	4a84      	ldr	r2, [pc, #528]	; (80025bc <HAL_GPIO_Init+0x294>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d013      	beq.n	80023d6 <HAL_GPIO_Init+0xae>
          break;
 80023ae:	e02c      	b.n	800240a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	623b      	str	r3, [r7, #32]
          break;
 80023b6:	e028      	b.n	800240a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	3304      	adds	r3, #4
 80023be:	623b      	str	r3, [r7, #32]
          break;
 80023c0:	e023      	b.n	800240a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	3308      	adds	r3, #8
 80023c8:	623b      	str	r3, [r7, #32]
          break;
 80023ca:	e01e      	b.n	800240a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	330c      	adds	r3, #12
 80023d2:	623b      	str	r3, [r7, #32]
          break;
 80023d4:	e019      	b.n	800240a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d102      	bne.n	80023e4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023de:	2304      	movs	r3, #4
 80023e0:	623b      	str	r3, [r7, #32]
          break;
 80023e2:	e012      	b.n	800240a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d105      	bne.n	80023f8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023ec:	2308      	movs	r3, #8
 80023ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	69fa      	ldr	r2, [r7, #28]
 80023f4:	611a      	str	r2, [r3, #16]
          break;
 80023f6:	e008      	b.n	800240a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023f8:	2308      	movs	r3, #8
 80023fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	69fa      	ldr	r2, [r7, #28]
 8002400:	615a      	str	r2, [r3, #20]
          break;
 8002402:	e002      	b.n	800240a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002404:	2300      	movs	r3, #0
 8002406:	623b      	str	r3, [r7, #32]
          break;
 8002408:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	2bff      	cmp	r3, #255	; 0xff
 800240e:	d801      	bhi.n	8002414 <HAL_GPIO_Init+0xec>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	e001      	b.n	8002418 <HAL_GPIO_Init+0xf0>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3304      	adds	r3, #4
 8002418:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	2bff      	cmp	r3, #255	; 0xff
 800241e:	d802      	bhi.n	8002426 <HAL_GPIO_Init+0xfe>
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	e002      	b.n	800242c <HAL_GPIO_Init+0x104>
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	3b08      	subs	r3, #8
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	210f      	movs	r1, #15
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	43db      	mvns	r3, r3
 800243c:	401a      	ands	r2, r3
 800243e:	6a39      	ldr	r1, [r7, #32]
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	431a      	orrs	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 8096 	beq.w	8002586 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800245a:	4b59      	ldr	r3, [pc, #356]	; (80025c0 <HAL_GPIO_Init+0x298>)
 800245c:	699b      	ldr	r3, [r3, #24]
 800245e:	4a58      	ldr	r2, [pc, #352]	; (80025c0 <HAL_GPIO_Init+0x298>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6193      	str	r3, [r2, #24]
 8002466:	4b56      	ldr	r3, [pc, #344]	; (80025c0 <HAL_GPIO_Init+0x298>)
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
 8002470:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002472:	4a54      	ldr	r2, [pc, #336]	; (80025c4 <HAL_GPIO_Init+0x29c>)
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	089b      	lsrs	r3, r3, #2
 8002478:	3302      	adds	r3, #2
 800247a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800247e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	f003 0303 	and.w	r3, r3, #3
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	220f      	movs	r2, #15
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	4013      	ands	r3, r2
 8002494:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a4b      	ldr	r2, [pc, #300]	; (80025c8 <HAL_GPIO_Init+0x2a0>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d013      	beq.n	80024c6 <HAL_GPIO_Init+0x19e>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4a      	ldr	r2, [pc, #296]	; (80025cc <HAL_GPIO_Init+0x2a4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d00d      	beq.n	80024c2 <HAL_GPIO_Init+0x19a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a49      	ldr	r2, [pc, #292]	; (80025d0 <HAL_GPIO_Init+0x2a8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d007      	beq.n	80024be <HAL_GPIO_Init+0x196>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a48      	ldr	r2, [pc, #288]	; (80025d4 <HAL_GPIO_Init+0x2ac>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d101      	bne.n	80024ba <HAL_GPIO_Init+0x192>
 80024b6:	2303      	movs	r3, #3
 80024b8:	e006      	b.n	80024c8 <HAL_GPIO_Init+0x1a0>
 80024ba:	2304      	movs	r3, #4
 80024bc:	e004      	b.n	80024c8 <HAL_GPIO_Init+0x1a0>
 80024be:	2302      	movs	r3, #2
 80024c0:	e002      	b.n	80024c8 <HAL_GPIO_Init+0x1a0>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <HAL_GPIO_Init+0x1a0>
 80024c6:	2300      	movs	r3, #0
 80024c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024ca:	f002 0203 	and.w	r2, r2, #3
 80024ce:	0092      	lsls	r2, r2, #2
 80024d0:	4093      	lsls	r3, r2
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024d8:	493a      	ldr	r1, [pc, #232]	; (80025c4 <HAL_GPIO_Init+0x29c>)
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	089b      	lsrs	r3, r3, #2
 80024de:	3302      	adds	r3, #2
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d006      	beq.n	8002500 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024f2:	4b39      	ldr	r3, [pc, #228]	; (80025d8 <HAL_GPIO_Init+0x2b0>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	4938      	ldr	r1, [pc, #224]	; (80025d8 <HAL_GPIO_Init+0x2b0>)
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]
 80024fe:	e006      	b.n	800250e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002500:	4b35      	ldr	r3, [pc, #212]	; (80025d8 <HAL_GPIO_Init+0x2b0>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	43db      	mvns	r3, r3
 8002508:	4933      	ldr	r1, [pc, #204]	; (80025d8 <HAL_GPIO_Init+0x2b0>)
 800250a:	4013      	ands	r3, r2
 800250c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d006      	beq.n	8002528 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800251a:	4b2f      	ldr	r3, [pc, #188]	; (80025d8 <HAL_GPIO_Init+0x2b0>)
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	492e      	ldr	r1, [pc, #184]	; (80025d8 <HAL_GPIO_Init+0x2b0>)
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	4313      	orrs	r3, r2
 8002524:	604b      	str	r3, [r1, #4]
 8002526:	e006      	b.n	8002536 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002528:	4b2b      	ldr	r3, [pc, #172]	; (80025d8 <HAL_GPIO_Init+0x2b0>)
 800252a:	685a      	ldr	r2, [r3, #4]
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	43db      	mvns	r3, r3
 8002530:	4929      	ldr	r1, [pc, #164]	; (80025d8 <HAL_GPIO_Init+0x2b0>)
 8002532:	4013      	ands	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d006      	beq.n	8002550 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002542:	4b25      	ldr	r3, [pc, #148]	; (80025d8 <HAL_GPIO_Init+0x2b0>)
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	4924      	ldr	r1, [pc, #144]	; (80025d8 <HAL_GPIO_Init+0x2b0>)
 8002548:	69bb      	ldr	r3, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	608b      	str	r3, [r1, #8]
 800254e:	e006      	b.n	800255e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002550:	4b21      	ldr	r3, [pc, #132]	; (80025d8 <HAL_GPIO_Init+0x2b0>)
 8002552:	689a      	ldr	r2, [r3, #8]
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	43db      	mvns	r3, r3
 8002558:	491f      	ldr	r1, [pc, #124]	; (80025d8 <HAL_GPIO_Init+0x2b0>)
 800255a:	4013      	ands	r3, r2
 800255c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d006      	beq.n	8002578 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800256a:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <HAL_GPIO_Init+0x2b0>)
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	491a      	ldr	r1, [pc, #104]	; (80025d8 <HAL_GPIO_Init+0x2b0>)
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	4313      	orrs	r3, r2
 8002574:	60cb      	str	r3, [r1, #12]
 8002576:	e006      	b.n	8002586 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002578:	4b17      	ldr	r3, [pc, #92]	; (80025d8 <HAL_GPIO_Init+0x2b0>)
 800257a:	68da      	ldr	r2, [r3, #12]
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	43db      	mvns	r3, r3
 8002580:	4915      	ldr	r1, [pc, #84]	; (80025d8 <HAL_GPIO_Init+0x2b0>)
 8002582:	4013      	ands	r3, r2
 8002584:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002588:	3301      	adds	r3, #1
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002592:	fa22 f303 	lsr.w	r3, r2, r3
 8002596:	2b00      	cmp	r3, #0
 8002598:	f47f aed0 	bne.w	800233c <HAL_GPIO_Init+0x14>
  }
}
 800259c:	bf00      	nop
 800259e:	372c      	adds	r7, #44	; 0x2c
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	10210000 	.word	0x10210000
 80025ac:	10110000 	.word	0x10110000
 80025b0:	10120000 	.word	0x10120000
 80025b4:	10310000 	.word	0x10310000
 80025b8:	10320000 	.word	0x10320000
 80025bc:	10220000 	.word	0x10220000
 80025c0:	40021000 	.word	0x40021000
 80025c4:	40010000 	.word	0x40010000
 80025c8:	40010800 	.word	0x40010800
 80025cc:	40010c00 	.word	0x40010c00
 80025d0:	40011000 	.word	0x40011000
 80025d4:	40011400 	.word	0x40011400
 80025d8:	40010400 	.word	0x40010400

080025dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
 80025e4:	460b      	mov	r3, r1
 80025e6:	807b      	strh	r3, [r7, #2]
 80025e8:	4613      	mov	r3, r2
 80025ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025ec:	787b      	ldrb	r3, [r7, #1]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025f2:	887a      	ldrh	r2, [r7, #2]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025f8:	e003      	b.n	8002602 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025fa:	887b      	ldrh	r3, [r7, #2]
 80025fc:	041a      	lsls	r2, r3, #16
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	611a      	str	r2, [r3, #16]
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr

0800260c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002616:	4b08      	ldr	r3, [pc, #32]	; (8002638 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002618:	695a      	ldr	r2, [r3, #20]
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	4013      	ands	r3, r2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d006      	beq.n	8002630 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002622:	4a05      	ldr	r2, [pc, #20]	; (8002638 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002628:	88fb      	ldrh	r3, [r7, #6]
 800262a:	4618      	mov	r0, r3
 800262c:	f000 f806 	bl	800263c <HAL_GPIO_EXTI_Callback>
  }
}
 8002630:	bf00      	nop
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40010400 	.word	0x40010400

0800263c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	4603      	mov	r3, r0
 8002644:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e11f      	b.n	80028a2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fe fef0 	bl	800145c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2224      	movs	r2, #36	; 0x24
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0201 	bic.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]

  /*RESET I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026b2:	601a      	str	r2, [r3, #0]


  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026b4:	f001 fb0e 	bl	8003cd4 <HAL_RCC_GetPCLK1Freq>
 80026b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4a7b      	ldr	r2, [pc, #492]	; (80028ac <HAL_I2C_Init+0x25c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d807      	bhi.n	80026d4 <HAL_I2C_Init+0x84>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4a7a      	ldr	r2, [pc, #488]	; (80028b0 <HAL_I2C_Init+0x260>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	bf94      	ite	ls
 80026cc:	2301      	movls	r3, #1
 80026ce:	2300      	movhi	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	e006      	b.n	80026e2 <HAL_I2C_Init+0x92>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4a77      	ldr	r2, [pc, #476]	; (80028b4 <HAL_I2C_Init+0x264>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	bf94      	ite	ls
 80026dc:	2301      	movls	r3, #1
 80026de:	2300      	movhi	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e0db      	b.n	80028a2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4a72      	ldr	r2, [pc, #456]	; (80028b8 <HAL_I2C_Init+0x268>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	0c9b      	lsrs	r3, r3, #18
 80026f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	430a      	orrs	r2, r1
 8002708:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	4a64      	ldr	r2, [pc, #400]	; (80028ac <HAL_I2C_Init+0x25c>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d802      	bhi.n	8002724 <HAL_I2C_Init+0xd4>
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	3301      	adds	r3, #1
 8002722:	e009      	b.n	8002738 <HAL_I2C_Init+0xe8>
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800272a:	fb02 f303 	mul.w	r3, r2, r3
 800272e:	4a63      	ldr	r2, [pc, #396]	; (80028bc <HAL_I2C_Init+0x26c>)
 8002730:	fba2 2303 	umull	r2, r3, r2, r3
 8002734:	099b      	lsrs	r3, r3, #6
 8002736:	3301      	adds	r3, #1
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	430b      	orrs	r3, r1
 800273e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800274a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4956      	ldr	r1, [pc, #344]	; (80028ac <HAL_I2C_Init+0x25c>)
 8002754:	428b      	cmp	r3, r1
 8002756:	d80d      	bhi.n	8002774 <HAL_I2C_Init+0x124>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1e59      	subs	r1, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	fbb1 f3f3 	udiv	r3, r1, r3
 8002766:	3301      	adds	r3, #1
 8002768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800276c:	2b04      	cmp	r3, #4
 800276e:	bf38      	it	cc
 8002770:	2304      	movcc	r3, #4
 8002772:	e04f      	b.n	8002814 <HAL_I2C_Init+0x1c4>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d111      	bne.n	80027a0 <HAL_I2C_Init+0x150>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	1e58      	subs	r0, r3, #1
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6859      	ldr	r1, [r3, #4]
 8002784:	460b      	mov	r3, r1
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	440b      	add	r3, r1
 800278a:	fbb0 f3f3 	udiv	r3, r0, r3
 800278e:	3301      	adds	r3, #1
 8002790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002794:	2b00      	cmp	r3, #0
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	e012      	b.n	80027c6 <HAL_I2C_Init+0x176>
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	1e58      	subs	r0, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6859      	ldr	r1, [r3, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	440b      	add	r3, r1
 80027ae:	0099      	lsls	r1, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027b6:	3301      	adds	r3, #1
 80027b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf0c      	ite	eq
 80027c0:	2301      	moveq	r3, #1
 80027c2:	2300      	movne	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_I2C_Init+0x17e>
 80027ca:	2301      	movs	r3, #1
 80027cc:	e022      	b.n	8002814 <HAL_I2C_Init+0x1c4>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10e      	bne.n	80027f4 <HAL_I2C_Init+0x1a4>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1e58      	subs	r0, r3, #1
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6859      	ldr	r1, [r3, #4]
 80027de:	460b      	mov	r3, r1
 80027e0:	005b      	lsls	r3, r3, #1
 80027e2:	440b      	add	r3, r1
 80027e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80027e8:	3301      	adds	r3, #1
 80027ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027f2:	e00f      	b.n	8002814 <HAL_I2C_Init+0x1c4>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	1e58      	subs	r0, r3, #1
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6859      	ldr	r1, [r3, #4]
 80027fc:	460b      	mov	r3, r1
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	0099      	lsls	r1, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	fbb0 f3f3 	udiv	r3, r0, r3
 800280a:	3301      	adds	r3, #1
 800280c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002810:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	6809      	ldr	r1, [r1, #0]
 8002818:	4313      	orrs	r3, r2
 800281a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69da      	ldr	r2, [r3, #28]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	430a      	orrs	r2, r1
 8002836:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002842:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6911      	ldr	r1, [r2, #16]
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	68d2      	ldr	r2, [r2, #12]
 800284e:	4311      	orrs	r1, r2
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	430b      	orrs	r3, r1
 8002856:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	695a      	ldr	r2, [r3, #20]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	431a      	orrs	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2220      	movs	r2, #32
 800288e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3710      	adds	r7, #16
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	000186a0 	.word	0x000186a0
 80028b0:	001e847f 	.word	0x001e847f
 80028b4:	003d08ff 	.word	0x003d08ff
 80028b8:	431bde83 	.word	0x431bde83
 80028bc:	10624dd3 	.word	0x10624dd3

080028c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b088      	sub	sp, #32
 80028c4:	af02      	add	r7, sp, #8
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	607a      	str	r2, [r7, #4]
 80028ca:	461a      	mov	r2, r3
 80028cc:	460b      	mov	r3, r1
 80028ce:	817b      	strh	r3, [r7, #10]
 80028d0:	4613      	mov	r3, r2
 80028d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028d4:	f7ff f9e4 	bl	8001ca0 <HAL_GetTick>
 80028d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	2b20      	cmp	r3, #32
 80028e4:	f040 80e0 	bne.w	8002aa8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	2319      	movs	r3, #25
 80028ee:	2201      	movs	r2, #1
 80028f0:	4970      	ldr	r1, [pc, #448]	; (8002ab4 <HAL_I2C_Master_Transmit+0x1f4>)
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fc3c 	bl	8003170 <I2C_WaitOnFlagUntilTimeout>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028fe:	2302      	movs	r3, #2
 8002900:	e0d3      	b.n	8002aaa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_I2C_Master_Transmit+0x50>
 800290c:	2302      	movs	r3, #2
 800290e:	e0cc      	b.n	8002aaa <HAL_I2C_Master_Transmit+0x1ea>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b01      	cmp	r3, #1
 8002924:	d007      	beq.n	8002936 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f042 0201 	orr.w	r2, r2, #1
 8002934:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002944:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2221      	movs	r2, #33	; 0x21
 800294a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2210      	movs	r2, #16
 8002952:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	893a      	ldrh	r2, [r7, #8]
 8002966:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4a50      	ldr	r2, [pc, #320]	; (8002ab8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002976:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002978:	8979      	ldrh	r1, [r7, #10]
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	6a3a      	ldr	r2, [r7, #32]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 faca 	bl	8002f18 <I2C_MasterRequestWrite>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e08d      	b.n	8002aaa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298e:	2300      	movs	r3, #0
 8002990:	613b      	str	r3, [r7, #16]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	695b      	ldr	r3, [r3, #20]
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	613b      	str	r3, [r7, #16]
 80029a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029a4:	e066      	b.n	8002a74 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	6a39      	ldr	r1, [r7, #32]
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f000 fcb6 	bl	800331c <I2C_WaitOnTXEFlagUntilTimeout>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00d      	beq.n	80029d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d107      	bne.n	80029ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e06b      	b.n	8002aaa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	781a      	ldrb	r2, [r3, #0]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	1c5a      	adds	r2, r3, #1
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fa:	3b01      	subs	r3, #1
 80029fc:	b29a      	uxth	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d11b      	bne.n	8002a48 <HAL_I2C_Master_Transmit+0x188>
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d017      	beq.n	8002a48 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	781a      	ldrb	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a28:	1c5a      	adds	r2, r3, #1
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b29a      	uxth	r2, r3
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	6a39      	ldr	r1, [r7, #32]
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 fca6 	bl	800339e <I2C_WaitOnBTFFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00d      	beq.n	8002a74 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d107      	bne.n	8002a70 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a6e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e01a      	b.n	8002aaa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d194      	bne.n	80029a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	e000      	b.n	8002aaa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002aa8:	2302      	movs	r3, #2
  }
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	00100002 	.word	0x00100002
 8002ab8:	ffff0000 	.word	0xffff0000

08002abc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b08c      	sub	sp, #48	; 0x30
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	607a      	str	r2, [r7, #4]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	460b      	mov	r3, r1
 8002aca:	817b      	strh	r3, [r7, #10]
 8002acc:	4613      	mov	r3, r2
 8002ace:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ad0:	f7ff f8e6 	bl	8001ca0 <HAL_GetTick>
 8002ad4:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b20      	cmp	r3, #32
 8002ae0:	f040 8213 	bne.w	8002f0a <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	2319      	movs	r3, #25
 8002aea:	2201      	movs	r2, #1
 8002aec:	497e      	ldr	r1, [pc, #504]	; (8002ce8 <HAL_I2C_Master_Receive+0x22c>)
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 fb3e 	bl	8003170 <I2C_WaitOnFlagUntilTimeout>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002afa:	2302      	movs	r3, #2
 8002afc:	e206      	b.n	8002f0c <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d101      	bne.n	8002b0c <HAL_I2C_Master_Receive+0x50>
 8002b08:	2302      	movs	r3, #2
 8002b0a:	e1ff      	b.n	8002f0c <HAL_I2C_Master_Receive+0x450>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d007      	beq.n	8002b32 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0201 	orr.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2222      	movs	r2, #34	; 0x22
 8002b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2210      	movs	r2, #16
 8002b4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	893a      	ldrh	r2, [r7, #8]
 8002b62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	4a5e      	ldr	r2, [pc, #376]	; (8002cec <HAL_I2C_Master_Receive+0x230>)
 8002b72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b74:	8979      	ldrh	r1, [r7, #10]
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fa42 	bl	8003004 <I2C_MasterRequestRead>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e1c0      	b.n	8002f0c <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d113      	bne.n	8002bba <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b92:	2300      	movs	r3, #0
 8002b94:	623b      	str	r3, [r7, #32]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	623b      	str	r3, [r7, #32]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	623b      	str	r3, [r7, #32]
 8002ba6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	e194      	b.n	8002ee4 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d11d      	bne.n	8002bfe <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd0:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61fb      	str	r3, [r7, #28]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	61fb      	str	r3, [r7, #28]
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bf8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002bfa:	b662      	cpsie	i
 8002bfc:	e172      	b.n	8002ee4 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d11d      	bne.n	8002c42 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c14:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c16:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61bb      	str	r3, [r7, #24]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	61bb      	str	r3, [r7, #24]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	61bb      	str	r3, [r7, #24]
 8002c2c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c3c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c3e:	b662      	cpsie	i
 8002c40:	e150      	b.n	8002ee4 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695b      	ldr	r3, [r3, #20]
 8002c5c:	617b      	str	r3, [r7, #20]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	617b      	str	r3, [r7, #20]
 8002c66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c68:	e13c      	b.n	8002ee4 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	f200 80f5 	bhi.w	8002e5e <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d123      	bne.n	8002cc4 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 fbcd 	bl	8003420 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e13d      	b.n	8002f0c <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691a      	ldr	r2, [r3, #16]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cac:	3b01      	subs	r3, #1
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002cc2:	e10f      	b.n	8002ee4 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d150      	bne.n	8002d6e <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	9300      	str	r3, [sp, #0]
 8002cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	4906      	ldr	r1, [pc, #24]	; (8002cf0 <HAL_I2C_Master_Receive+0x234>)
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 fa4a 	bl	8003170 <I2C_WaitOnFlagUntilTimeout>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d008      	beq.n	8002cf4 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e112      	b.n	8002f0c <HAL_I2C_Master_Receive+0x450>
 8002ce6:	bf00      	nop
 8002ce8:	00100002 	.word	0x00100002
 8002cec:	ffff0000 	.word	0xffff0000
 8002cf0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002cf4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d04:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	691a      	ldr	r2, [r3, #16]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	1c5a      	adds	r2, r3, #1
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d22:	3b01      	subs	r3, #1
 8002d24:	b29a      	uxth	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b29a      	uxth	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d38:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d6c:	e0ba      	b.n	8002ee4 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	2200      	movs	r2, #0
 8002d76:	4967      	ldr	r1, [pc, #412]	; (8002f14 <HAL_I2C_Master_Receive+0x458>)
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f9f9 	bl	8003170 <I2C_WaitOnFlagUntilTimeout>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e0c1      	b.n	8002f0c <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d98:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	691a      	ldr	r2, [r3, #16]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db6:	3b01      	subs	r3, #1
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	494f      	ldr	r1, [pc, #316]	; (8002f14 <HAL_I2C_Master_Receive+0x458>)
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f9ca 	bl	8003170 <I2C_WaitOnFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e092      	b.n	8002f0c <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df4:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691a      	ldr	r2, [r3, #16]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e08:	1c5a      	adds	r2, r3, #1
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	3b01      	subs	r3, #1
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e28:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	1c5a      	adds	r2, r3, #1
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e46:	3b01      	subs	r3, #1
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	3b01      	subs	r3, #1
 8002e56:	b29a      	uxth	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e5c:	e042      	b.n	8002ee4 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e60:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e62:	68f8      	ldr	r0, [r7, #12]
 8002e64:	f000 fadc 	bl	8003420 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e04c      	b.n	8002f0c <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	691a      	ldr	r2, [r3, #16]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	b2d2      	uxtb	r2, r2
 8002e7e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	b29a      	uxth	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d118      	bne.n	8002ee4 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f47f aebe 	bne.w	8002c6a <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	e000      	b.n	8002f0c <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8002f0a:	2302      	movs	r3, #2
  }
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3728      	adds	r7, #40	; 0x28
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	00010004 	.word	0x00010004

08002f18 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	460b      	mov	r3, r1
 8002f26:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f2c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d006      	beq.n	8002f42 <I2C_MasterRequestWrite+0x2a>
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d003      	beq.n	8002f42 <I2C_MasterRequestWrite+0x2a>
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f40:	d108      	bne.n	8002f54 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e00b      	b.n	8002f6c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f58:	2b12      	cmp	r3, #18
 8002f5a:	d107      	bne.n	8002f6c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f6a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f78:	68f8      	ldr	r0, [r7, #12]
 8002f7a:	f000 f8f9 	bl	8003170 <I2C_WaitOnFlagUntilTimeout>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d001      	beq.n	8002f88 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e035      	b.n	8002ff4 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f90:	d108      	bne.n	8002fa4 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f92:	897b      	ldrh	r3, [r7, #10]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	461a      	mov	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fa0:	611a      	str	r2, [r3, #16]
 8002fa2:	e01b      	b.n	8002fdc <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fa4:	897b      	ldrh	r3, [r7, #10]
 8002fa6:	11db      	asrs	r3, r3, #7
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	f003 0306 	and.w	r3, r3, #6
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	f063 030f 	orn	r3, r3, #15
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	490e      	ldr	r1, [pc, #56]	; (8002ffc <I2C_MasterRequestWrite+0xe4>)
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f92b 	bl	800321e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e010      	b.n	8002ff4 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002fd2:	897b      	ldrh	r3, [r7, #10]
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	4907      	ldr	r1, [pc, #28]	; (8003000 <I2C_MasterRequestWrite+0xe8>)
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f000 f91b 	bl	800321e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3718      	adds	r7, #24
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	00010008 	.word	0x00010008
 8003000:	00010002 	.word	0x00010002

08003004 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b088      	sub	sp, #32
 8003008:	af02      	add	r7, sp, #8
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	607a      	str	r2, [r7, #4]
 800300e:	603b      	str	r3, [r7, #0]
 8003010:	460b      	mov	r3, r1
 8003012:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003028:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2b08      	cmp	r3, #8
 800302e:	d006      	beq.n	800303e <I2C_MasterRequestRead+0x3a>
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d003      	beq.n	800303e <I2C_MasterRequestRead+0x3a>
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800303c:	d108      	bne.n	8003050 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	e00b      	b.n	8003068 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003054:	2b11      	cmp	r3, #17
 8003056:	d107      	bne.n	8003068 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003066:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f000 f87b 	bl	8003170 <I2C_WaitOnFlagUntilTimeout>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e06d      	b.n	8003160 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800308c:	d108      	bne.n	80030a0 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800308e:	897b      	ldrh	r3, [r7, #10]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	f043 0301 	orr.w	r3, r3, #1
 8003096:	b2da      	uxtb	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	611a      	str	r2, [r3, #16]
 800309e:	e053      	b.n	8003148 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030a0:	897b      	ldrh	r3, [r7, #10]
 80030a2:	11db      	asrs	r3, r3, #7
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	f003 0306 	and.w	r3, r3, #6
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	f063 030f 	orn	r3, r3, #15
 80030b0:	b2da      	uxtb	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	492a      	ldr	r1, [pc, #168]	; (8003168 <I2C_MasterRequestRead+0x164>)
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f8ad 	bl	800321e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e048      	b.n	8003160 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030ce:	897b      	ldrh	r3, [r7, #10]
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	4923      	ldr	r1, [pc, #140]	; (800316c <I2C_MasterRequestRead+0x168>)
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 f89d 	bl	800321e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e038      	b.n	8003160 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ee:	2300      	movs	r3, #0
 80030f0:	613b      	str	r3, [r7, #16]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	613b      	str	r3, [r7, #16]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	699b      	ldr	r3, [r3, #24]
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003112:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f825 	bl	8003170 <I2C_WaitOnFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e017      	b.n	8003160 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003130:	897b      	ldrh	r3, [r7, #10]
 8003132:	11db      	asrs	r3, r3, #7
 8003134:	b2db      	uxtb	r3, r3
 8003136:	f003 0306 	and.w	r3, r3, #6
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f063 030e 	orn	r3, r3, #14
 8003140:	b2da      	uxtb	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	4907      	ldr	r1, [pc, #28]	; (800316c <I2C_MasterRequestRead+0x168>)
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f865 	bl	800321e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3718      	adds	r7, #24
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	00010008 	.word	0x00010008
 800316c:	00010002 	.word	0x00010002

08003170 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	603b      	str	r3, [r7, #0]
 800317c:	4613      	mov	r3, r2
 800317e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003180:	e025      	b.n	80031ce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d021      	beq.n	80031ce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318a:	f7fe fd89 	bl	8001ca0 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d302      	bcc.n	80031a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d116      	bne.n	80031ce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2220      	movs	r2, #32
 80031aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	f043 0220 	orr.w	r2, r3, #32
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e023      	b.n	8003216 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	0c1b      	lsrs	r3, r3, #16
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d10d      	bne.n	80031f4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	43da      	mvns	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	4013      	ands	r3, r2
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	bf0c      	ite	eq
 80031ea:	2301      	moveq	r3, #1
 80031ec:	2300      	movne	r3, #0
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	461a      	mov	r2, r3
 80031f2:	e00c      	b.n	800320e <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	43da      	mvns	r2, r3
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	4013      	ands	r3, r2
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	bf0c      	ite	eq
 8003206:	2301      	moveq	r3, #1
 8003208:	2300      	movne	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	429a      	cmp	r2, r3
 8003212:	d0b6      	beq.n	8003182 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b084      	sub	sp, #16
 8003222:	af00      	add	r7, sp, #0
 8003224:	60f8      	str	r0, [r7, #12]
 8003226:	60b9      	str	r1, [r7, #8]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800322c:	e051      	b.n	80032d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	695b      	ldr	r3, [r3, #20]
 8003234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800323c:	d123      	bne.n	8003286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800324c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003256:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2220      	movs	r2, #32
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003272:	f043 0204 	orr.w	r2, r3, #4
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e046      	b.n	8003314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328c:	d021      	beq.n	80032d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800328e:	f7fe fd07 	bl	8001ca0 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	429a      	cmp	r2, r3
 800329c:	d302      	bcc.n	80032a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d116      	bne.n	80032d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2220      	movs	r2, #32
 80032ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f043 0220 	orr.w	r2, r3, #32
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e020      	b.n	8003314 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	0c1b      	lsrs	r3, r3, #16
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d10c      	bne.n	80032f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	43da      	mvns	r2, r3
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	4013      	ands	r3, r2
 80032e8:	b29b      	uxth	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	bf14      	ite	ne
 80032ee:	2301      	movne	r3, #1
 80032f0:	2300      	moveq	r3, #0
 80032f2:	b2db      	uxtb	r3, r3
 80032f4:	e00b      	b.n	800330e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	43da      	mvns	r2, r3
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	4013      	ands	r3, r2
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	bf14      	ite	ne
 8003308:	2301      	movne	r3, #1
 800330a:	2300      	moveq	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d18d      	bne.n	800322e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003328:	e02d      	b.n	8003386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 f8ce 	bl	80034cc <I2C_IsAcknowledgeFailed>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e02d      	b.n	8003396 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003340:	d021      	beq.n	8003386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003342:	f7fe fcad 	bl	8001ca0 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	429a      	cmp	r2, r3
 8003350:	d302      	bcc.n	8003358 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d116      	bne.n	8003386 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2220      	movs	r2, #32
 8003362:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	f043 0220 	orr.w	r2, r3, #32
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e007      	b.n	8003396 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003390:	2b80      	cmp	r3, #128	; 0x80
 8003392:	d1ca      	bne.n	800332a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3710      	adds	r7, #16
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800339e:	b580      	push	{r7, lr}
 80033a0:	b084      	sub	sp, #16
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	60f8      	str	r0, [r7, #12]
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033aa:	e02d      	b.n	8003408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 f88d 	bl	80034cc <I2C_IsAcknowledgeFailed>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e02d      	b.n	8003418 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c2:	d021      	beq.n	8003408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c4:	f7fe fc6c 	bl	8001ca0 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d302      	bcc.n	80033da <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d116      	bne.n	8003408 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2220      	movs	r2, #32
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f4:	f043 0220 	orr.w	r2, r3, #32
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e007      	b.n	8003418 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	2b04      	cmp	r3, #4
 8003414:	d1ca      	bne.n	80033ac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800342c:	e042      	b.n	80034b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	f003 0310 	and.w	r3, r3, #16
 8003438:	2b10      	cmp	r3, #16
 800343a:	d119      	bne.n	8003470 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0210 	mvn.w	r2, #16
 8003444:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e029      	b.n	80034c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003470:	f7fe fc16 	bl	8001ca0 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	429a      	cmp	r2, r3
 800347e:	d302      	bcc.n	8003486 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d116      	bne.n	80034b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2200      	movs	r2, #0
 800348a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2220      	movs	r2, #32
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a0:	f043 0220 	orr.w	r2, r3, #32
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e007      	b.n	80034c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034be:	2b40      	cmp	r3, #64	; 0x40
 80034c0:	d1b5      	bne.n	800342e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3710      	adds	r7, #16
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b083      	sub	sp, #12
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034e2:	d11b      	bne.n	800351c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80034ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003508:	f043 0204 	orr.w	r2, r3, #4
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e000      	b.n	800351e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e26c      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 8087 	beq.w	8003656 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003548:	4b92      	ldr	r3, [pc, #584]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 030c 	and.w	r3, r3, #12
 8003550:	2b04      	cmp	r3, #4
 8003552:	d00c      	beq.n	800356e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003554:	4b8f      	ldr	r3, [pc, #572]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f003 030c 	and.w	r3, r3, #12
 800355c:	2b08      	cmp	r3, #8
 800355e:	d112      	bne.n	8003586 <HAL_RCC_OscConfig+0x5e>
 8003560:	4b8c      	ldr	r3, [pc, #560]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800356c:	d10b      	bne.n	8003586 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800356e:	4b89      	ldr	r3, [pc, #548]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d06c      	beq.n	8003654 <HAL_RCC_OscConfig+0x12c>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d168      	bne.n	8003654 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e246      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358e:	d106      	bne.n	800359e <HAL_RCC_OscConfig+0x76>
 8003590:	4b80      	ldr	r3, [pc, #512]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a7f      	ldr	r2, [pc, #508]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	e02e      	b.n	80035fc <HAL_RCC_OscConfig+0xd4>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCC_OscConfig+0x98>
 80035a6:	4b7b      	ldr	r3, [pc, #492]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a7a      	ldr	r2, [pc, #488]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035b0:	6013      	str	r3, [r2, #0]
 80035b2:	4b78      	ldr	r3, [pc, #480]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a77      	ldr	r2, [pc, #476]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035bc:	6013      	str	r3, [r2, #0]
 80035be:	e01d      	b.n	80035fc <HAL_RCC_OscConfig+0xd4>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCC_OscConfig+0xbc>
 80035ca:	4b72      	ldr	r3, [pc, #456]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a71      	ldr	r2, [pc, #452]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035d4:	6013      	str	r3, [r2, #0]
 80035d6:	4b6f      	ldr	r3, [pc, #444]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a6e      	ldr	r2, [pc, #440]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e0:	6013      	str	r3, [r2, #0]
 80035e2:	e00b      	b.n	80035fc <HAL_RCC_OscConfig+0xd4>
 80035e4:	4b6b      	ldr	r3, [pc, #428]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a6a      	ldr	r2, [pc, #424]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	4b68      	ldr	r3, [pc, #416]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a67      	ldr	r2, [pc, #412]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80035f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d013      	beq.n	800362c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003604:	f7fe fb4c 	bl	8001ca0 <HAL_GetTick>
 8003608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360a:	e008      	b.n	800361e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800360c:	f7fe fb48 	bl	8001ca0 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	2b64      	cmp	r3, #100	; 0x64
 8003618:	d901      	bls.n	800361e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e1fa      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800361e:	4b5d      	ldr	r3, [pc, #372]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0f0      	beq.n	800360c <HAL_RCC_OscConfig+0xe4>
 800362a:	e014      	b.n	8003656 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800362c:	f7fe fb38 	bl	8001ca0 <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003634:	f7fe fb34 	bl	8001ca0 <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b64      	cmp	r3, #100	; 0x64
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e1e6      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003646:	4b53      	ldr	r3, [pc, #332]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1f0      	bne.n	8003634 <HAL_RCC_OscConfig+0x10c>
 8003652:	e000      	b.n	8003656 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d063      	beq.n	800372a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003662:	4b4c      	ldr	r3, [pc, #304]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	f003 030c 	and.w	r3, r3, #12
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00b      	beq.n	8003686 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800366e:	4b49      	ldr	r3, [pc, #292]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b08      	cmp	r3, #8
 8003678:	d11c      	bne.n	80036b4 <HAL_RCC_OscConfig+0x18c>
 800367a:	4b46      	ldr	r3, [pc, #280]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d116      	bne.n	80036b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003686:	4b43      	ldr	r3, [pc, #268]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <HAL_RCC_OscConfig+0x176>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d001      	beq.n	800369e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e1ba      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369e:	4b3d      	ldr	r3, [pc, #244]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4939      	ldr	r1, [pc, #228]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036b2:	e03a      	b.n	800372a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d020      	beq.n	80036fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036bc:	4b36      	ldr	r3, [pc, #216]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 80036be:	2201      	movs	r2, #1
 80036c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c2:	f7fe faed 	bl	8001ca0 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036c8:	e008      	b.n	80036dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ca:	f7fe fae9 	bl	8001ca0 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e19b      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036dc:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0f0      	beq.n	80036ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036e8:	4b2a      	ldr	r3, [pc, #168]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	00db      	lsls	r3, r3, #3
 80036f6:	4927      	ldr	r1, [pc, #156]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	600b      	str	r3, [r1, #0]
 80036fc:	e015      	b.n	800372a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036fe:	4b26      	ldr	r3, [pc, #152]	; (8003798 <HAL_RCC_OscConfig+0x270>)
 8003700:	2200      	movs	r2, #0
 8003702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003704:	f7fe facc 	bl	8001ca0 <HAL_GetTick>
 8003708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800370a:	e008      	b.n	800371e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800370c:	f7fe fac8 	bl	8001ca0 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	2b02      	cmp	r3, #2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e17a      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800371e:	4b1d      	ldr	r3, [pc, #116]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d1f0      	bne.n	800370c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0308 	and.w	r3, r3, #8
 8003732:	2b00      	cmp	r3, #0
 8003734:	d03a      	beq.n	80037ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d019      	beq.n	8003772 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800373e:	4b17      	ldr	r3, [pc, #92]	; (800379c <HAL_RCC_OscConfig+0x274>)
 8003740:	2201      	movs	r2, #1
 8003742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003744:	f7fe faac 	bl	8001ca0 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800374c:	f7fe faa8 	bl	8001ca0 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e15a      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800375e:	4b0d      	ldr	r3, [pc, #52]	; (8003794 <HAL_RCC_OscConfig+0x26c>)
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f0      	beq.n	800374c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800376a:	2001      	movs	r0, #1
 800376c:	f000 fada 	bl	8003d24 <RCC_Delay>
 8003770:	e01c      	b.n	80037ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003772:	4b0a      	ldr	r3, [pc, #40]	; (800379c <HAL_RCC_OscConfig+0x274>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003778:	f7fe fa92 	bl	8001ca0 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800377e:	e00f      	b.n	80037a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003780:	f7fe fa8e 	bl	8001ca0 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d908      	bls.n	80037a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e140      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000
 8003798:	42420000 	.word	0x42420000
 800379c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037a0:	4b9e      	ldr	r3, [pc, #632]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e9      	bne.n	8003780 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0304 	and.w	r3, r3, #4
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 80a6 	beq.w	8003906 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ba:	2300      	movs	r3, #0
 80037bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037be:	4b97      	ldr	r3, [pc, #604]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 80037c0:	69db      	ldr	r3, [r3, #28]
 80037c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10d      	bne.n	80037e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037ca:	4b94      	ldr	r3, [pc, #592]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	4a93      	ldr	r2, [pc, #588]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 80037d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d4:	61d3      	str	r3, [r2, #28]
 80037d6:	4b91      	ldr	r3, [pc, #580]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e2:	2301      	movs	r3, #1
 80037e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e6:	4b8e      	ldr	r3, [pc, #568]	; (8003a20 <HAL_RCC_OscConfig+0x4f8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d118      	bne.n	8003824 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037f2:	4b8b      	ldr	r3, [pc, #556]	; (8003a20 <HAL_RCC_OscConfig+0x4f8>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a8a      	ldr	r2, [pc, #552]	; (8003a20 <HAL_RCC_OscConfig+0x4f8>)
 80037f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037fe:	f7fe fa4f 	bl	8001ca0 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003806:	f7fe fa4b 	bl	8001ca0 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b64      	cmp	r3, #100	; 0x64
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e0fd      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003818:	4b81      	ldr	r3, [pc, #516]	; (8003a20 <HAL_RCC_OscConfig+0x4f8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f0      	beq.n	8003806 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d106      	bne.n	800383a <HAL_RCC_OscConfig+0x312>
 800382c:	4b7b      	ldr	r3, [pc, #492]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	4a7a      	ldr	r2, [pc, #488]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003832:	f043 0301 	orr.w	r3, r3, #1
 8003836:	6213      	str	r3, [r2, #32]
 8003838:	e02d      	b.n	8003896 <HAL_RCC_OscConfig+0x36e>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10c      	bne.n	800385c <HAL_RCC_OscConfig+0x334>
 8003842:	4b76      	ldr	r3, [pc, #472]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	4a75      	ldr	r2, [pc, #468]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	6213      	str	r3, [r2, #32]
 800384e:	4b73      	ldr	r3, [pc, #460]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	4a72      	ldr	r2, [pc, #456]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003854:	f023 0304 	bic.w	r3, r3, #4
 8003858:	6213      	str	r3, [r2, #32]
 800385a:	e01c      	b.n	8003896 <HAL_RCC_OscConfig+0x36e>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	2b05      	cmp	r3, #5
 8003862:	d10c      	bne.n	800387e <HAL_RCC_OscConfig+0x356>
 8003864:	4b6d      	ldr	r3, [pc, #436]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	4a6c      	ldr	r2, [pc, #432]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 800386a:	f043 0304 	orr.w	r3, r3, #4
 800386e:	6213      	str	r3, [r2, #32]
 8003870:	4b6a      	ldr	r3, [pc, #424]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	4a69      	ldr	r2, [pc, #420]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	6213      	str	r3, [r2, #32]
 800387c:	e00b      	b.n	8003896 <HAL_RCC_OscConfig+0x36e>
 800387e:	4b67      	ldr	r3, [pc, #412]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	4a66      	ldr	r2, [pc, #408]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003884:	f023 0301 	bic.w	r3, r3, #1
 8003888:	6213      	str	r3, [r2, #32]
 800388a:	4b64      	ldr	r3, [pc, #400]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	4a63      	ldr	r2, [pc, #396]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003890:	f023 0304 	bic.w	r3, r3, #4
 8003894:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d015      	beq.n	80038ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800389e:	f7fe f9ff 	bl	8001ca0 <HAL_GetTick>
 80038a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038a4:	e00a      	b.n	80038bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a6:	f7fe f9fb 	bl	8001ca0 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e0ab      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038bc:	4b57      	ldr	r3, [pc, #348]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0ee      	beq.n	80038a6 <HAL_RCC_OscConfig+0x37e>
 80038c8:	e014      	b.n	80038f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ca:	f7fe f9e9 	bl	8001ca0 <HAL_GetTick>
 80038ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038d0:	e00a      	b.n	80038e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d2:	f7fe f9e5 	bl	8001ca0 <HAL_GetTick>
 80038d6:	4602      	mov	r2, r0
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e095      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e8:	4b4c      	ldr	r3, [pc, #304]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d1ee      	bne.n	80038d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038f4:	7dfb      	ldrb	r3, [r7, #23]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d105      	bne.n	8003906 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038fa:	4b48      	ldr	r3, [pc, #288]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	4a47      	ldr	r2, [pc, #284]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003900:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003904:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	2b00      	cmp	r3, #0
 800390c:	f000 8081 	beq.w	8003a12 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003910:	4b42      	ldr	r3, [pc, #264]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 030c 	and.w	r3, r3, #12
 8003918:	2b08      	cmp	r3, #8
 800391a:	d061      	beq.n	80039e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	2b02      	cmp	r3, #2
 8003922:	d146      	bne.n	80039b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003924:	4b3f      	ldr	r3, [pc, #252]	; (8003a24 <HAL_RCC_OscConfig+0x4fc>)
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392a:	f7fe f9b9 	bl	8001ca0 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003932:	f7fe f9b5 	bl	8001ca0 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e067      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003944:	4b35      	ldr	r3, [pc, #212]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1f0      	bne.n	8003932 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1b      	ldr	r3, [r3, #32]
 8003954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003958:	d108      	bne.n	800396c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800395a:	4b30      	ldr	r3, [pc, #192]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	492d      	ldr	r1, [pc, #180]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003968:	4313      	orrs	r3, r2
 800396a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800396c:	4b2b      	ldr	r3, [pc, #172]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a19      	ldr	r1, [r3, #32]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397c:	430b      	orrs	r3, r1
 800397e:	4927      	ldr	r1, [pc, #156]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 8003980:	4313      	orrs	r3, r2
 8003982:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003984:	4b27      	ldr	r3, [pc, #156]	; (8003a24 <HAL_RCC_OscConfig+0x4fc>)
 8003986:	2201      	movs	r2, #1
 8003988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800398a:	f7fe f989 	bl	8001ca0 <HAL_GetTick>
 800398e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003990:	e008      	b.n	80039a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003992:	f7fe f985 	bl	8001ca0 <HAL_GetTick>
 8003996:	4602      	mov	r2, r0
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	1ad3      	subs	r3, r2, r3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d901      	bls.n	80039a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80039a0:	2303      	movs	r3, #3
 80039a2:	e037      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039a4:	4b1d      	ldr	r3, [pc, #116]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0f0      	beq.n	8003992 <HAL_RCC_OscConfig+0x46a>
 80039b0:	e02f      	b.n	8003a12 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039b2:	4b1c      	ldr	r3, [pc, #112]	; (8003a24 <HAL_RCC_OscConfig+0x4fc>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039b8:	f7fe f972 	bl	8001ca0 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039c0:	f7fe f96e 	bl	8001ca0 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e020      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039d2:	4b12      	ldr	r3, [pc, #72]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f0      	bne.n	80039c0 <HAL_RCC_OscConfig+0x498>
 80039de:	e018      	b.n	8003a12 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e013      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <HAL_RCC_OscConfig+0x4f4>)
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d106      	bne.n	8003a0e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d001      	beq.n	8003a12 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3718      	adds	r7, #24
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	40007000 	.word	0x40007000
 8003a24:	42420060 	.word	0x42420060

08003a28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b084      	sub	sp, #16
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e0d0      	b.n	8003bde <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a3c:	4b6a      	ldr	r3, [pc, #424]	; (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d910      	bls.n	8003a6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4a:	4b67      	ldr	r3, [pc, #412]	; (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 0207 	bic.w	r2, r3, #7
 8003a52:	4965      	ldr	r1, [pc, #404]	; (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a5a:	4b63      	ldr	r3, [pc, #396]	; (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0307 	and.w	r3, r3, #7
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d001      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0b8      	b.n	8003bde <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d020      	beq.n	8003aba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a84:	4b59      	ldr	r3, [pc, #356]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	4a58      	ldr	r2, [pc, #352]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003a8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a9c:	4b53      	ldr	r3, [pc, #332]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	4a52      	ldr	r2, [pc, #328]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003aa2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003aa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aa8:	4b50      	ldr	r3, [pc, #320]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	494d      	ldr	r1, [pc, #308]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d040      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b01      	cmp	r3, #1
 8003acc:	d107      	bne.n	8003ade <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ace:	4b47      	ldr	r3, [pc, #284]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d115      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e07f      	b.n	8003bde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d107      	bne.n	8003af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ae6:	4b41      	ldr	r3, [pc, #260]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d109      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	e073      	b.n	8003bde <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af6:	4b3d      	ldr	r3, [pc, #244]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e06b      	b.n	8003bde <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b06:	4b39      	ldr	r3, [pc, #228]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f023 0203 	bic.w	r2, r3, #3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	4936      	ldr	r1, [pc, #216]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003b14:	4313      	orrs	r3, r2
 8003b16:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b18:	f7fe f8c2 	bl	8001ca0 <HAL_GetTick>
 8003b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b1e:	e00a      	b.n	8003b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b20:	f7fe f8be 	bl	8001ca0 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e053      	b.n	8003bde <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b36:	4b2d      	ldr	r3, [pc, #180]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f003 020c 	and.w	r2, r3, #12
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d1eb      	bne.n	8003b20 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b48:	4b27      	ldr	r3, [pc, #156]	; (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d210      	bcs.n	8003b78 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b56:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f023 0207 	bic.w	r2, r3, #7
 8003b5e:	4922      	ldr	r1, [pc, #136]	; (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b66:	4b20      	ldr	r3, [pc, #128]	; (8003be8 <HAL_RCC_ClockConfig+0x1c0>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	683a      	ldr	r2, [r7, #0]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d001      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e032      	b.n	8003bde <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b84:	4b19      	ldr	r3, [pc, #100]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	4916      	ldr	r1, [pc, #88]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0308 	and.w	r3, r3, #8
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d009      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ba2:	4b12      	ldr	r3, [pc, #72]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	490e      	ldr	r1, [pc, #56]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003bb6:	f000 f821 	bl	8003bfc <HAL_RCC_GetSysClockFreq>
 8003bba:	4601      	mov	r1, r0
 8003bbc:	4b0b      	ldr	r3, [pc, #44]	; (8003bec <HAL_RCC_ClockConfig+0x1c4>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	091b      	lsrs	r3, r3, #4
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	4a0a      	ldr	r2, [pc, #40]	; (8003bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc8:	5cd3      	ldrb	r3, [r2, r3]
 8003bca:	fa21 f303 	lsr.w	r3, r1, r3
 8003bce:	4a09      	ldr	r2, [pc, #36]	; (8003bf4 <HAL_RCC_ClockConfig+0x1cc>)
 8003bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003bd2:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <HAL_RCC_ClockConfig+0x1d0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f7fe f820 	bl	8001c1c <HAL_InitTick>

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	40022000 	.word	0x40022000
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	08004364 	.word	0x08004364
 8003bf4:	200002b4 	.word	0x200002b4
 8003bf8:	200002b8 	.word	0x200002b8

08003bfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bfc:	b490      	push	{r4, r7}
 8003bfe:	b08a      	sub	sp, #40	; 0x28
 8003c00:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003c02:	4b2a      	ldr	r3, [pc, #168]	; (8003cac <HAL_RCC_GetSysClockFreq+0xb0>)
 8003c04:	1d3c      	adds	r4, r7, #4
 8003c06:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003c0c:	4b28      	ldr	r3, [pc, #160]	; (8003cb0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	61fb      	str	r3, [r7, #28]
 8003c16:	2300      	movs	r3, #0
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1e:	2300      	movs	r3, #0
 8003c20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003c22:	2300      	movs	r3, #0
 8003c24:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003c26:	4b23      	ldr	r3, [pc, #140]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f003 030c 	and.w	r3, r3, #12
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	d002      	beq.n	8003c3c <HAL_RCC_GetSysClockFreq+0x40>
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d003      	beq.n	8003c42 <HAL_RCC_GetSysClockFreq+0x46>
 8003c3a:	e02d      	b.n	8003c98 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003c3c:	4b1e      	ldr	r3, [pc, #120]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c3e:	623b      	str	r3, [r7, #32]
      break;
 8003c40:	e02d      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	0c9b      	lsrs	r3, r3, #18
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c4e:	4413      	add	r3, r2
 8003c50:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003c54:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d013      	beq.n	8003c88 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003c60:	4b14      	ldr	r3, [pc, #80]	; (8003cb4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	0c5b      	lsrs	r3, r3, #17
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003c6e:	4413      	add	r3, r2
 8003c70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003c74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	4a0f      	ldr	r2, [pc, #60]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c7a:	fb02 f203 	mul.w	r2, r2, r3
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
 8003c86:	e004      	b.n	8003c92 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	4a0c      	ldr	r2, [pc, #48]	; (8003cbc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c8c:	fb02 f303 	mul.w	r3, r2, r3
 8003c90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c94:	623b      	str	r3, [r7, #32]
      break;
 8003c96:	e002      	b.n	8003c9e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c98:	4b07      	ldr	r3, [pc, #28]	; (8003cb8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c9a:	623b      	str	r3, [r7, #32]
      break;
 8003c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c9e:	6a3b      	ldr	r3, [r7, #32]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3728      	adds	r7, #40	; 0x28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc90      	pop	{r4, r7}
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	08004350 	.word	0x08004350
 8003cb0:	08004360 	.word	0x08004360
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	007a1200 	.word	0x007a1200
 8003cbc:	003d0900 	.word	0x003d0900

08003cc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cc4:	4b02      	ldr	r3, [pc, #8]	; (8003cd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr
 8003cd0:	200002b4 	.word	0x200002b4

08003cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cd8:	f7ff fff2 	bl	8003cc0 <HAL_RCC_GetHCLKFreq>
 8003cdc:	4601      	mov	r1, r0
 8003cde:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	4a03      	ldr	r2, [pc, #12]	; (8003cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cea:	5cd3      	ldrb	r3, [r2, r3]
 8003cec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	08004374 	.word	0x08004374

08003cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d00:	f7ff ffde 	bl	8003cc0 <HAL_RCC_GetHCLKFreq>
 8003d04:	4601      	mov	r1, r0
 8003d06:	4b05      	ldr	r3, [pc, #20]	; (8003d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	0adb      	lsrs	r3, r3, #11
 8003d0c:	f003 0307 	and.w	r3, r3, #7
 8003d10:	4a03      	ldr	r2, [pc, #12]	; (8003d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d12:	5cd3      	ldrb	r3, [r2, r3]
 8003d14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40021000 	.word	0x40021000
 8003d20:	08004374 	.word	0x08004374

08003d24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	; (8003d58 <RCC_Delay+0x34>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <RCC_Delay+0x38>)
 8003d32:	fba2 2303 	umull	r2, r3, r2, r3
 8003d36:	0a5b      	lsrs	r3, r3, #9
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	fb02 f303 	mul.w	r3, r2, r3
 8003d3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003d40:	bf00      	nop
  }
  while (Delay --);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	1e5a      	subs	r2, r3, #1
 8003d46:	60fa      	str	r2, [r7, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1f9      	bne.n	8003d40 <RCC_Delay+0x1c>
}
 8003d4c:	bf00      	nop
 8003d4e:	3714      	adds	r7, #20
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bc80      	pop	{r7}
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	200002b4 	.word	0x200002b4
 8003d5c:	10624dd3 	.word	0x10624dd3

08003d60 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d07d      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d80:	4b4f      	ldr	r3, [pc, #316]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d10d      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d8c:	4b4c      	ldr	r3, [pc, #304]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	4a4b      	ldr	r2, [pc, #300]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d96:	61d3      	str	r3, [r2, #28]
 8003d98:	4b49      	ldr	r3, [pc, #292]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da0:	60bb      	str	r3, [r7, #8]
 8003da2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003da4:	2301      	movs	r3, #1
 8003da6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da8:	4b46      	ldr	r3, [pc, #280]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d118      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003db4:	4b43      	ldr	r3, [pc, #268]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a42      	ldr	r2, [pc, #264]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dc0:	f7fd ff6e 	bl	8001ca0 <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc6:	e008      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc8:	f7fd ff6a 	bl	8001ca0 <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	; 0x64
 8003dd4:	d901      	bls.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e06d      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dda:	4b3a      	ldr	r3, [pc, #232]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003de6:	4b36      	ldr	r3, [pc, #216]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dee:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d02e      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	d027      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e04:	4b2e      	ldr	r3, [pc, #184]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e0c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e0e:	4b2e      	ldr	r3, [pc, #184]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e10:	2201      	movs	r2, #1
 8003e12:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e14:	4b2c      	ldr	r3, [pc, #176]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003e1a:	4a29      	ldr	r2, [pc, #164]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d014      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2a:	f7fd ff39 	bl	8001ca0 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e30:	e00a      	b.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e32:	f7fd ff35 	bl	8001ca0 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d901      	bls.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e036      	b.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e48:	4b1d      	ldr	r3, [pc, #116]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d0ee      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e54:	4b1a      	ldr	r3, [pc, #104]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	4917      	ldr	r1, [pc, #92]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e66:	7dfb      	ldrb	r3, [r7, #23]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d105      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e6c:	4b14      	ldr	r3, [pc, #80]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	4a13      	ldr	r2, [pc, #76]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e72:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e76:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d008      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003e84:	4b0e      	ldr	r3, [pc, #56]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	490b      	ldr	r1, [pc, #44]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e92:	4313      	orrs	r3, r2
 8003e94:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d008      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ea2:	4b07      	ldr	r3, [pc, #28]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	4904      	ldr	r1, [pc, #16]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40021000 	.word	0x40021000
 8003ec4:	40007000 	.word	0x40007000
 8003ec8:	42420440 	.word	0x42420440

08003ecc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e03f      	b.n	8003f5e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fd faf0 	bl	80014d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2224      	movs	r2, #36	; 0x24
 8003efc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f000 f90b 	bl	800412c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	695a      	ldr	r2, [r3, #20]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68da      	ldr	r2, [r3, #12]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b088      	sub	sp, #32
 8003f6a:	af02      	add	r7, sp, #8
 8003f6c:	60f8      	str	r0, [r7, #12]
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	603b      	str	r3, [r7, #0]
 8003f72:	4613      	mov	r3, r2
 8003f74:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b20      	cmp	r3, #32
 8003f84:	f040 8083 	bne.w	800408e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d002      	beq.n	8003f94 <HAL_UART_Transmit+0x2e>
 8003f8e:	88fb      	ldrh	r3, [r7, #6]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e07b      	b.n	8004090 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_UART_Transmit+0x40>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e074      	b.n	8004090 <HAL_UART_Transmit+0x12a>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2221      	movs	r2, #33	; 0x21
 8003fb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003fbc:	f7fd fe70 	bl	8001ca0 <HAL_GetTick>
 8003fc0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	88fa      	ldrh	r2, [r7, #6]
 8003fc6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	88fa      	ldrh	r2, [r7, #6]
 8003fcc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fce:	e042      	b.n	8004056 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	3b01      	subs	r3, #1
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe6:	d122      	bne.n	800402e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	2180      	movs	r1, #128	; 0x80
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f000 f850 	bl	8004098 <UART_WaitOnFlagUntilTimeout>
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d001      	beq.n	8004002 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e046      	b.n	8004090 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	881b      	ldrh	r3, [r3, #0]
 800400a:	461a      	mov	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004014:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d103      	bne.n	8004026 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	3302      	adds	r3, #2
 8004022:	60bb      	str	r3, [r7, #8]
 8004024:	e017      	b.n	8004056 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	3301      	adds	r3, #1
 800402a:	60bb      	str	r3, [r7, #8]
 800402c:	e013      	b.n	8004056 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2200      	movs	r2, #0
 8004036:	2180      	movs	r1, #128	; 0x80
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 f82d 	bl	8004098 <UART_WaitOnFlagUntilTimeout>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e023      	b.n	8004090 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	1c5a      	adds	r2, r3, #1
 800404c:	60ba      	str	r2, [r7, #8]
 800404e:	781a      	ldrb	r2, [r3, #0]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800405a:	b29b      	uxth	r3, r3
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1b7      	bne.n	8003fd0 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	9300      	str	r3, [sp, #0]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	2200      	movs	r2, #0
 8004068:	2140      	movs	r1, #64	; 0x40
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	f000 f814 	bl	8004098 <UART_WaitOnFlagUntilTimeout>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d001      	beq.n	800407a <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e00a      	b.n	8004090 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	e000      	b.n	8004090 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800408e:	2302      	movs	r3, #2
  }
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	4613      	mov	r3, r2
 80040a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040a8:	e02c      	b.n	8004104 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d028      	beq.n	8004104 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d007      	beq.n	80040c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80040b8:	f7fd fdf2 	bl	8001ca0 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	69ba      	ldr	r2, [r7, #24]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d21d      	bcs.n	8004104 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80040d6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	695a      	ldr	r2, [r3, #20]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0201 	bic.w	r2, r2, #1
 80040e6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e00f      	b.n	8004124 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	681a      	ldr	r2, [r3, #0]
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	4013      	ands	r3, r2
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	429a      	cmp	r2, r3
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	461a      	mov	r2, r3
 800411c:	79fb      	ldrb	r3, [r7, #7]
 800411e:	429a      	cmp	r2, r3
 8004120:	d0c3      	beq.n	80040aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3710      	adds	r7, #16
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}

0800412c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b084      	sub	sp, #16
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	431a      	orrs	r2, r3
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	4313      	orrs	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004166:	f023 030c 	bic.w	r3, r3, #12
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6812      	ldr	r2, [r2, #0]
 800416e:	68f9      	ldr	r1, [r7, #12]
 8004170:	430b      	orrs	r3, r1
 8004172:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699a      	ldr	r2, [r3, #24]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a52      	ldr	r2, [pc, #328]	; (80042d8 <UART_SetConfig+0x1ac>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d14e      	bne.n	8004232 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004194:	f7ff fdb2 	bl	8003cfc <HAL_RCC_GetPCLK2Freq>
 8004198:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800419a:	68ba      	ldr	r2, [r7, #8]
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	009a      	lsls	r2, r3, #2
 80041a4:	441a      	add	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b0:	4a4a      	ldr	r2, [pc, #296]	; (80042dc <UART_SetConfig+0x1b0>)
 80041b2:	fba2 2303 	umull	r2, r3, r2, r3
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	0119      	lsls	r1, r3, #4
 80041ba:	68ba      	ldr	r2, [r7, #8]
 80041bc:	4613      	mov	r3, r2
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	4413      	add	r3, r2
 80041c2:	009a      	lsls	r2, r3, #2
 80041c4:	441a      	add	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80041d0:	4b42      	ldr	r3, [pc, #264]	; (80042dc <UART_SetConfig+0x1b0>)
 80041d2:	fba3 0302 	umull	r0, r3, r3, r2
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	2064      	movs	r0, #100	; 0x64
 80041da:	fb00 f303 	mul.w	r3, r0, r3
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	3332      	adds	r3, #50	; 0x32
 80041e4:	4a3d      	ldr	r2, [pc, #244]	; (80042dc <UART_SetConfig+0x1b0>)
 80041e6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ea:	095b      	lsrs	r3, r3, #5
 80041ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041f0:	4419      	add	r1, r3
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	4613      	mov	r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	4413      	add	r3, r2
 80041fa:	009a      	lsls	r2, r3, #2
 80041fc:	441a      	add	r2, r3
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	fbb2 f2f3 	udiv	r2, r2, r3
 8004208:	4b34      	ldr	r3, [pc, #208]	; (80042dc <UART_SetConfig+0x1b0>)
 800420a:	fba3 0302 	umull	r0, r3, r3, r2
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	2064      	movs	r0, #100	; 0x64
 8004212:	fb00 f303 	mul.w	r3, r0, r3
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	3332      	adds	r3, #50	; 0x32
 800421c:	4a2f      	ldr	r2, [pc, #188]	; (80042dc <UART_SetConfig+0x1b0>)
 800421e:	fba2 2303 	umull	r2, r3, r2, r3
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	f003 020f 	and.w	r2, r3, #15
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	440a      	add	r2, r1
 800422e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8004230:	e04d      	b.n	80042ce <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8004232:	f7ff fd4f 	bl	8003cd4 <HAL_RCC_GetPCLK1Freq>
 8004236:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	4613      	mov	r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4413      	add	r3, r2
 8004240:	009a      	lsls	r2, r3, #2
 8004242:	441a      	add	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	fbb2 f3f3 	udiv	r3, r2, r3
 800424e:	4a23      	ldr	r2, [pc, #140]	; (80042dc <UART_SetConfig+0x1b0>)
 8004250:	fba2 2303 	umull	r2, r3, r2, r3
 8004254:	095b      	lsrs	r3, r3, #5
 8004256:	0119      	lsls	r1, r3, #4
 8004258:	68ba      	ldr	r2, [r7, #8]
 800425a:	4613      	mov	r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	4413      	add	r3, r2
 8004260:	009a      	lsls	r2, r3, #2
 8004262:	441a      	add	r2, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	fbb2 f2f3 	udiv	r2, r2, r3
 800426e:	4b1b      	ldr	r3, [pc, #108]	; (80042dc <UART_SetConfig+0x1b0>)
 8004270:	fba3 0302 	umull	r0, r3, r3, r2
 8004274:	095b      	lsrs	r3, r3, #5
 8004276:	2064      	movs	r0, #100	; 0x64
 8004278:	fb00 f303 	mul.w	r3, r0, r3
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	3332      	adds	r3, #50	; 0x32
 8004282:	4a16      	ldr	r2, [pc, #88]	; (80042dc <UART_SetConfig+0x1b0>)
 8004284:	fba2 2303 	umull	r2, r3, r2, r3
 8004288:	095b      	lsrs	r3, r3, #5
 800428a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800428e:	4419      	add	r1, r3
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	009a      	lsls	r2, r3, #2
 800429a:	441a      	add	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80042a6:	4b0d      	ldr	r3, [pc, #52]	; (80042dc <UART_SetConfig+0x1b0>)
 80042a8:	fba3 0302 	umull	r0, r3, r3, r2
 80042ac:	095b      	lsrs	r3, r3, #5
 80042ae:	2064      	movs	r0, #100	; 0x64
 80042b0:	fb00 f303 	mul.w	r3, r0, r3
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	3332      	adds	r3, #50	; 0x32
 80042ba:	4a08      	ldr	r2, [pc, #32]	; (80042dc <UART_SetConfig+0x1b0>)
 80042bc:	fba2 2303 	umull	r2, r3, r2, r3
 80042c0:	095b      	lsrs	r3, r3, #5
 80042c2:	f003 020f 	and.w	r2, r3, #15
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	440a      	add	r2, r1
 80042cc:	609a      	str	r2, [r3, #8]
}
 80042ce:	bf00      	nop
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40013800 	.word	0x40013800
 80042dc:	51eb851f 	.word	0x51eb851f

080042e0 <__libc_init_array>:
 80042e0:	b570      	push	{r4, r5, r6, lr}
 80042e2:	2500      	movs	r5, #0
 80042e4:	4e0c      	ldr	r6, [pc, #48]	; (8004318 <__libc_init_array+0x38>)
 80042e6:	4c0d      	ldr	r4, [pc, #52]	; (800431c <__libc_init_array+0x3c>)
 80042e8:	1ba4      	subs	r4, r4, r6
 80042ea:	10a4      	asrs	r4, r4, #2
 80042ec:	42a5      	cmp	r5, r4
 80042ee:	d109      	bne.n	8004304 <__libc_init_array+0x24>
 80042f0:	f000 f822 	bl	8004338 <_init>
 80042f4:	2500      	movs	r5, #0
 80042f6:	4e0a      	ldr	r6, [pc, #40]	; (8004320 <__libc_init_array+0x40>)
 80042f8:	4c0a      	ldr	r4, [pc, #40]	; (8004324 <__libc_init_array+0x44>)
 80042fa:	1ba4      	subs	r4, r4, r6
 80042fc:	10a4      	asrs	r4, r4, #2
 80042fe:	42a5      	cmp	r5, r4
 8004300:	d105      	bne.n	800430e <__libc_init_array+0x2e>
 8004302:	bd70      	pop	{r4, r5, r6, pc}
 8004304:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004308:	4798      	blx	r3
 800430a:	3501      	adds	r5, #1
 800430c:	e7ee      	b.n	80042ec <__libc_init_array+0xc>
 800430e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004312:	4798      	blx	r3
 8004314:	3501      	adds	r5, #1
 8004316:	e7f2      	b.n	80042fe <__libc_init_array+0x1e>
 8004318:	0800437c 	.word	0x0800437c
 800431c:	0800437c 	.word	0x0800437c
 8004320:	0800437c 	.word	0x0800437c
 8004324:	08004380 	.word	0x08004380

08004328 <memset>:
 8004328:	4603      	mov	r3, r0
 800432a:	4402      	add	r2, r0
 800432c:	4293      	cmp	r3, r2
 800432e:	d100      	bne.n	8004332 <memset+0xa>
 8004330:	4770      	bx	lr
 8004332:	f803 1b01 	strb.w	r1, [r3], #1
 8004336:	e7f9      	b.n	800432c <memset+0x4>

08004338 <_init>:
 8004338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433a:	bf00      	nop
 800433c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433e:	bc08      	pop	{r3}
 8004340:	469e      	mov	lr, r3
 8004342:	4770      	bx	lr

08004344 <_fini>:
 8004344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004346:	bf00      	nop
 8004348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800434a:	bc08      	pop	{r3}
 800434c:	469e      	mov	lr, r3
 800434e:	4770      	bx	lr
